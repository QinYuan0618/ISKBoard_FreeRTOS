
ISKBoard_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08006ef4  08006ef4  00007ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b0  080071b0  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071b0  080071b0  000081b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b8  080071b8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b8  080071b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071bc  080071bc  000081bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080071c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002270  2000006c  0800722c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022dc  0800722c  000092dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa10  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7a  00000000  00000000  00023aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00027928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001253  00000000  00000000  000290f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025411  00000000  00000000  0002a343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce71  00000000  00000000  0004f754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6b0  00000000  00000000  0006c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000689c  00000000  00000000  00146cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014d554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006edc 	.word	0x08006edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006edc 	.word	0x08006edc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <MX_FREERTOS_Init+0x18>)
 8000502:	2100      	movs	r1, #0
 8000504:	4804      	ldr	r0, [pc, #16]	@ (8000518 <MX_FREERTOS_Init+0x1c>)
 8000506:	f003 f9b1 	bl	800386c <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a03      	ldr	r2, [pc, #12]	@ (800051c <MX_FREERTOS_Init+0x20>)
 800050e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08007144 	.word	0x08007144
 8000518:	08000521 	.word	0x08000521
 800051c:	20000088 	.word	0x20000088

08000520 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f003 fa31 	bl	8003990 <osDelay>
 800052e:	e7fb      	b.n	8000528 <StartDefaultTask+0x8>

08000530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000546:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	4a23      	ldr	r2, [pc, #140]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 800054c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000552:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056a:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_GPIO_Init+0xa8>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_Blue_GPIO_Port, RGB_Blue_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2104      	movs	r1, #4
 8000592:	4812      	ldr	r0, [pc, #72]	@ (80005dc <MX_GPIO_Init+0xac>)
 8000594:	f000 ff2a 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RGB_Blue_Pin */
  GPIO_InitStruct.Pin = RGB_Blue_Pin;
 8000598:	2304      	movs	r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RGB_Blue_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4619      	mov	r1, r3
 80005ae:	480b      	ldr	r0, [pc, #44]	@ (80005dc <MX_GPIO_Init+0xac>)
 80005b0:	f000 fd8a 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Key1_Pin Key2_Pin */
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;
 80005b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80005b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MX_GPIO_Init+0xac>)
 80005ca:	f000 fd7d 	bl	80010c8 <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000400 	.word	0x48000400

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fc31 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81e 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ffa0 	bl	8000530 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 fa00 	bl	80009f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Welcome to FreeRTOS test project!\r\n");
 80005f4:	4809      	ldr	r0, [pc, #36]	@ (800061c <main+0x3c>)
 80005f6:	f006 f8cf 	bl	8006798 <puts>

  /* 启动FreeRTOS应用 */
  FreeRTOS_App_Init();
 80005fa:	f000 faa1 	bl	8000b40 <FreeRTOS_App_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80005fe:	f003 f8eb 	bl	80037d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000602:	f7ff ff7b 	bl	80004fc <MX_FREERTOS_Init>

  /* Start scheduler */
  printf("\n Start scheduler \n");
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <main+0x40>)
 8000608:	f006 f8c6 	bl	8006798 <puts>
  osKernelStart();
 800060c:	f003 f908 	bl	8003820 <osKernelStart>
  printf("\n have Started scheduler \n");
 8000610:	4804      	ldr	r0, [pc, #16]	@ (8000624 <main+0x44>)
 8000612:	f006 f8c1 	bl	8006798 <puts>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x36>
 800061a:	bf00      	nop
 800061c:	08006f00 	.word	0x08006f00
 8000620:	08006f24 	.word	0x08006f24
 8000624:	08006f38 	.word	0x08006f38

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b096      	sub	sp, #88	@ 0x58
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2244      	movs	r2, #68	@ 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f98e 	bl	8006958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800064e:	f000 fef3 	bl	8001438 <HAL_PWREx_ControlVoltageScaling>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000658:	f000 f848 	bl	80006ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	2303      	movs	r3, #3
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000672:	2314      	movs	r3, #20
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ff2c 	bl	80014e4 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000692:	f000 f82b 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fb2c 	bl	8001d0c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 f817 	bl	80006ec <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	@ 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d101      	bne.n	80006de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80006da:	f000 fbcf 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40001400 	.word	0x40001400

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <HAL_MspInit+0x4c>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000702:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <HAL_MspInit+0x4c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	@ 0x60
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <HAL_MspInit+0x4c>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <HAL_MspInit+0x4c>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071a:	4a0a      	ldr	r2, [pc, #40]	@ (8000744 <HAL_MspInit+0x4c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	@ 0x58
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <HAL_MspInit+0x4c>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	210f      	movs	r1, #15
 8000732:	f06f 0001 	mvn.w	r0, #1
 8000736:	f000 fc9d 	bl	8001074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	@ 0x38
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000756:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <HAL_InitTick+0xe0>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075a:	4a33      	ldr	r2, [pc, #204]	@ (8000828 <HAL_InitTick+0xe0>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6593      	str	r3, [r2, #88]	@ 0x58
 8000762:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <HAL_InitTick+0xe0>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800076e:	f107 0210 	add.w	r2, r7, #16
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fc8b 	bl	8002094 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800077e:	6a3b      	ldr	r3, [r7, #32]
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000784:	2b00      	cmp	r3, #0
 8000786:	d103      	bne.n	8000790 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000788:	f001 fc58 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 800078c:	6378      	str	r0, [r7, #52]	@ 0x34
 800078e:	e004      	b.n	800079a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000790:	f001 fc54 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8000794:	4603      	mov	r3, r0
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800079a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800079c:	4a23      	ldr	r2, [pc, #140]	@ (800082c <HAL_InitTick+0xe4>)
 800079e:	fba2 2303 	umull	r2, r3, r2, r3
 80007a2:	0c9b      	lsrs	r3, r3, #18
 80007a4:	3b01      	subs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80007a8:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <HAL_InitTick+0xe8>)
 80007aa:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <HAL_InitTick+0xec>)
 80007ac:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80007ae:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <HAL_InitTick+0xe8>)
 80007b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007b4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80007b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <HAL_InitTick+0xe8>)
 80007b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ba:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <HAL_InitTick+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <HAL_InitTick+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_InitTick+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80007ce:	4818      	ldr	r0, [pc, #96]	@ (8000830 <HAL_InitTick+0xe8>)
 80007d0:	f001 fffc 	bl	80027cc <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d11b      	bne.n	800081a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80007e2:	4813      	ldr	r0, [pc, #76]	@ (8000830 <HAL_InitTick+0xe8>)
 80007e4:	f002 f854 	bl	8002890 <HAL_TIM_Base_Start_IT>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d111      	bne.n	800081a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007f6:	2037      	movs	r0, #55	@ 0x37
 80007f8:	f000 fc58 	bl	80010ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	d808      	bhi.n	8000814 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000802:	2200      	movs	r2, #0
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	2037      	movs	r0, #55	@ 0x37
 8000808:	f000 fc34 	bl	8001074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800080c:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <HAL_InitTick+0xf0>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e002      	b.n	800081a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800081a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800081e:	4618      	mov	r0, r3
 8000820:	3738      	adds	r7, #56	@ 0x38
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	431bde83 	.word	0x431bde83
 8000830:	2000008c 	.word	0x2000008c
 8000834:	40001400 	.word	0x40001400
 8000838:	20000004 	.word	0x20000004

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <TIM7_IRQHandler+0x10>)
 800087a:	f002 f85d 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000008c 	.word	0x2000008c

08000888 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	e00a      	b.n	80008b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800089a:	f3af 8000 	nop.w
 800089e:	4601      	mov	r1, r0
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	60ba      	str	r2, [r7, #8]
 80008a6:	b2ca      	uxtb	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf0      	blt.n	800089a <_read+0x12>
  }

  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e009      	b.n	80008e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fa79 	bl	8000dd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf1      	blt.n	80008d4 <_write+0x12>
  }
  return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_close>:

int _close(int file)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000922:	605a      	str	r2, [r3, #4]
  return 0;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <_isatty>:

int _isatty(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f006 f82e 	bl	80069f4 <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000c000 	.word	0x2000c000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	200000d8 	.word	0x200000d8
 80009cc:	200022e0 	.word	0x200022e0

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	@ (8000a50 <MX_USART1_UART_Init+0x5c>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_USART1_UART_Init+0x58>)
 8000a38:	f002 f93c 	bl	8002cb4 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a42:	f7ff fe53 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000dc 	.word	0x200000dc
 8000a50:	40013800 	.word	0x40013800

08000a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0a0      	sub	sp, #128	@ 0x80
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	225c      	movs	r2, #92	@ 0x5c
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f005 ff6f 	bl	8006958 <memset>
  if(uartHandle->Instance==USART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000afc <HAL_UART_MspInit+0xa8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d137      	bne.n	8000af4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fb91 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff fe26 	bl	80006ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_UART_MspInit+0xac>)
 8000aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa4:	4a16      	ldr	r2, [pc, #88]	@ (8000b00 <HAL_UART_MspInit+0xac>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <HAL_UART_MspInit+0xac>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_UART_MspInit+0xac>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_UART_MspInit+0xac>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_UART_MspInit+0xac>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af0:	f000 faea 	bl	80010c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000af4:	bf00      	nop
 8000af6:	3780      	adds	r7, #128	@ 0x80
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40013800 	.word	0x40013800
 8000b00:	40021000 	.word	0x40021000

08000b04 <Key_Scan>:
 * @param  GPIOx: 按键所在的GPIO端口
 * @param  GPIO_Pin: 按键对应的GPIO引脚
 * @retval KEY_ON: 按键按下, KEY_OFF: 按键释放
 */
uint8_t Key_Scan(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
    /* 检测是否有按键按下 */
    if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET) {
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 fc51 	bl	80013bc <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10a      	bne.n	8000b36 <Key_Scan+0x32>
        /* 等待按键释放 */
        while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET);
 8000b20:	bf00      	nop
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	4619      	mov	r1, r3
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 fc48 	bl	80013bc <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f7      	beq.n	8000b22 <Key_Scan+0x1e>
        return KEY_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <Key_Scan+0x34>
    } else {
        return KEY_OFF;
 8000b36:	2300      	movs	r3, #0
    }
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <FreeRTOS_App_Init>:
 * @param  无
 * @retval 无
 * @note   创建应用任务并启动调度器
 */
void FreeRTOS_App_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af04      	add	r7, sp, #16
    /* 板级外设初始化 */
    RTOS_BSP_Init();
 8000b46:	f000 f8f5 	bl	8000d34 <RTOS_BSP_Init>

    printf("This is a test about task management\r\n");
 8000b4a:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <FreeRTOS_App_Init+0x50>)
 8000b4c:	f005 fe24 	bl	8006798 <puts>
    printf("push KEY1 to suspend task, pull KEY2 to resume task\n");
 8000b50:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <FreeRTOS_App_Init+0x54>)
 8000b52:	f005 fe21 	bl	8006798 <puts>

    /* 创建 AppTaskCreate 任务 */
    AppTaskCreate_Handle = xTaskCreateStatic(
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <FreeRTOS_App_Init+0x58>)
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <FreeRTOS_App_Init+0x5c>)
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	2303      	movs	r3, #3
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2300      	movs	r3, #0
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	490e      	ldr	r1, [pc, #56]	@ (8000ba0 <FreeRTOS_App_Init+0x60>)
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <FreeRTOS_App_Init+0x64>)
 8000b6a:	f003 fcdb 	bl	8004524 <xTaskCreateStatic>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <FreeRTOS_App_Init+0x68>)
 8000b72:	6013      	str	r3, [r2, #0]
        (UBaseType_t)3,                     // 任务优先级
        (StackType_t*)AppTaskCreate_Stack,  // 任务堆栈
        (StaticTask_t*)&AppTaskCreate_TCB   // 任务控制块
    );

    if(NULL != AppTaskCreate_Handle) {
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <FreeRTOS_App_Init+0x68>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <FreeRTOS_App_Init+0x44>
        printf("AppTaskCreate successful\r\n");
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <FreeRTOS_App_Init+0x6c>)
 8000b7e:	f005 fe0b 	bl	8006798 <puts>
 8000b82:	e003      	b.n	8000b8c <FreeRTOS_App_Init+0x4c>
#if 0 // 会与 main() 中的oskelnelStart()函数冲突
        /* 启动任务，开启调度 */
        vTaskStartScheduler();
#endif
    } else {
        printf("AppTaskCreate failure\r\n");
 8000b84:	480a      	ldr	r0, [pc, #40]	@ (8000bb0 <FreeRTOS_App_Init+0x70>)
 8000b86:	f005 fe07 	bl	8006798 <puts>
    }

    /* 正常不会执行到这里 */
    while(1) {
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <FreeRTOS_App_Init+0x4c>
 8000b90:	08006f54 	.word	0x08006f54
 8000b94:	08006f7c 	.word	0x08006f7c
 8000b98:	20000770 	.word	0x20000770
 8000b9c:	20000170 	.word	0x20000170
 8000ba0:	08006fb0 	.word	0x08006fb0
 8000ba4:	08000bb5 	.word	0x08000bb5
 8000ba8:	20000164 	.word	0x20000164
 8000bac:	08006fc0 	.word	0x08006fc0
 8000bb0:	08006fdc 	.word	0x08006fdc

08000bb4 <AppTaskCreate>:
 * @param  无
 * @retval 无
 * @note   为了方便管理，所有的任务创建函数都放在这个函数里面
 */
static void AppTaskCreate(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af04      	add	r7, sp, #16
    taskENTER_CRITICAL();  // 进入临界区
 8000bba:	f005 f9c5 	bl	8005f48 <vPortEnterCritical>

    /* 创建LED_Task任务 */
    LED_Task_Handle = xTaskCreateStatic(
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <AppTaskCreate+0x88>)
 8000bc0:	9302      	str	r3, [sp, #8]
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <AppTaskCreate+0x8c>)
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	491d      	ldr	r1, [pc, #116]	@ (8000c44 <AppTaskCreate+0x90>)
 8000bd0:	481d      	ldr	r0, [pc, #116]	@ (8000c48 <AppTaskCreate+0x94>)
 8000bd2:	f003 fca7 	bl	8004524 <xTaskCreateStatic>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <AppTaskCreate+0x98>)
 8000bda:	6013      	str	r3, [r2, #0]
        (UBaseType_t)4,                     // 任务优先级
        (StackType_t*)LED_Task_Stack,       // 任务堆栈
        (StaticTask_t*)&LED_Task_TCB        // 任务控制块
    );

    if(NULL != LED_Task_Handle) {
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <AppTaskCreate+0x98>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <AppTaskCreate+0x38>
        printf("LED_Task create successful\n");
 8000be4:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <AppTaskCreate+0x9c>)
 8000be6:	f005 fdd7 	bl	8006798 <puts>
 8000bea:	e002      	b.n	8000bf2 <AppTaskCreate+0x3e>
    } else {
        printf("LED_Task create failure\n");
 8000bec:	4819      	ldr	r0, [pc, #100]	@ (8000c54 <AppTaskCreate+0xa0>)
 8000bee:	f005 fdd3 	bl	8006798 <puts>
    }

    /* 创建KEY_Task任务 */
    KEY_Task_Handle = xTaskCreateStatic(
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <AppTaskCreate+0xa4>)
 8000bf4:	9302      	str	r3, [sp, #8]
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <AppTaskCreate+0xa8>)
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2280      	movs	r2, #128	@ 0x80
 8000c02:	4917      	ldr	r1, [pc, #92]	@ (8000c60 <AppTaskCreate+0xac>)
 8000c04:	4817      	ldr	r0, [pc, #92]	@ (8000c64 <AppTaskCreate+0xb0>)
 8000c06:	f003 fc8d 	bl	8004524 <xTaskCreateStatic>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <AppTaskCreate+0xb4>)
 8000c0e:	6013      	str	r3, [r2, #0]
        (UBaseType_t)3,                     // 任务优先级
        (StackType_t*)KEY_Task_Stack,       // 任务堆栈
        (StaticTask_t*)&KEY_Task_TCB        // 任务控制块
    );

    if(NULL != KEY_Task_Handle) {
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <AppTaskCreate+0xb4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <AppTaskCreate+0x6c>
        printf("KEY_Task create successful\r\n");
 8000c18:	4814      	ldr	r0, [pc, #80]	@ (8000c6c <AppTaskCreate+0xb8>)
 8000c1a:	f005 fdbd 	bl	8006798 <puts>
 8000c1e:	e002      	b.n	8000c26 <AppTaskCreate+0x72>
    } else {
        printf("KEY_Task create failure\r\n");
 8000c20:	4813      	ldr	r0, [pc, #76]	@ (8000c70 <AppTaskCreate+0xbc>)
 8000c22:	f005 fdb9 	bl	8006798 <puts>
    }

    vTaskDelete(AppTaskCreate_Handle);  // 删除AppTaskCreate任务
 8000c26:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <AppTaskCreate+0xc0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f003 fe20 	bl	8004870 <vTaskDelete>

    taskEXIT_CRITICAL();  // 退出临界区
 8000c30:	f005 f9bc 	bl	8005fac <vPortExitCritical>
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200007cc 	.word	0x200007cc
 8000c40:	20000370 	.word	0x20000370
 8000c44:	08006ff4 	.word	0x08006ff4
 8000c48:	08000c79 	.word	0x08000c79
 8000c4c:	20000168 	.word	0x20000168
 8000c50:	08007000 	.word	0x08007000
 8000c54:	0800701c 	.word	0x0800701c
 8000c58:	20000828 	.word	0x20000828
 8000c5c:	20000570 	.word	0x20000570
 8000c60:	08007034 	.word	0x08007034
 8000c64:	08000cc1 	.word	0x08000cc1
 8000c68:	2000016c 	.word	0x2000016c
 8000c6c:	08007040 	.word	0x08007040
 8000c70:	0800705c 	.word	0x0800705c
 8000c74:	20000164 	.word	0x20000164

08000c78 <LED_Task>:
 * @brief  LED任务函数
 * @param  parameter: 任务参数
 * @retval 无
 */
static void LED_Task(void* parameter)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    while (1) {
        LED1_ON;
 8000c80:	2200      	movs	r2, #0
 8000c82:	2104      	movs	r1, #4
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <LED_Task+0x3c>)
 8000c86:	f000 fbb1 	bl	80013ec <HAL_GPIO_WritePin>
        vTaskDelay(500);   /* 延时500个tick */
 8000c8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c8e:	f003 fe63 	bl	8004958 <vTaskDelay>
        printf("LED_Task Running, LED1_ON\r\n");
 8000c92:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <LED_Task+0x40>)
 8000c94:	f005 fd80 	bl	8006798 <puts>

        LED1_OFF;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <LED_Task+0x3c>)
 8000c9e:	f000 fba5 	bl	80013ec <HAL_GPIO_WritePin>
        vTaskDelay(500);   /* 延时500个tick */
 8000ca2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca6:	f003 fe57 	bl	8004958 <vTaskDelay>
        printf("LED_Task Running, LED1_OFF\r\n");
 8000caa:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <LED_Task+0x44>)
 8000cac:	f005 fd74 	bl	8006798 <puts>
        LED1_ON;
 8000cb0:	bf00      	nop
 8000cb2:	e7e5      	b.n	8000c80 <LED_Task+0x8>
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	08007078 	.word	0x08007078
 8000cbc:	08007094 	.word	0x08007094

08000cc0 <KEY_Task>:
 * @brief  KEY任务函数
 * @param  parameter: 任务参数
 * @retval 无
 */
static void KEY_Task(void* parameter)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    while (1) {
        if( Key_Scan(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON ) {
 8000cc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ccc:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <KEY_Task+0x5c>)
 8000cce:	f7ff ff19 	bl	8000b04 <Key_Scan>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10a      	bne.n	8000cee <KEY_Task+0x2e>
            /* K1 被按下 */
            printf("suspend LED task\n");
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <KEY_Task+0x60>)
 8000cda:	f005 fd5d 	bl	8006798 <puts>
            vTaskSuspend(LED_Task_Handle);/* 挂起LED任务 */
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <KEY_Task+0x64>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fe6e 	bl	80049c4 <vTaskSuspend>
            printf("suspend LED task successful\n");
 8000ce8:	480f      	ldr	r0, [pc, #60]	@ (8000d28 <KEY_Task+0x68>)
 8000cea:	f005 fd55 	bl	8006798 <puts>
        }
        if( Key_Scan(KEY2_GPIO_PORT, KEY2_GPIO_PIN) == KEY_ON ) {
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <KEY_Task+0x5c>)
 8000cf4:	f7ff ff06 	bl	8000b04 <Key_Scan>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10a      	bne.n	8000d14 <KEY_Task+0x54>
            /* K2 被按下 */
            printf("resume LED task\n");
 8000cfe:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <KEY_Task+0x6c>)
 8000d00:	f005 fd4a 	bl	8006798 <puts>
            vTaskResume(LED_Task_Handle);/* 恢复LED任务！ */
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <KEY_Task+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 ff03 	bl	8004b14 <vTaskResume>
            printf("resume LED task successful\n");
 8000d0e:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <KEY_Task+0x70>)
 8000d10:	f005 fd42 	bl	8006798 <puts>
        }
        vTaskDelay(20);/* 延时20个tick */
 8000d14:	2014      	movs	r0, #20
 8000d16:	f003 fe1f 	bl	8004958 <vTaskDelay>
        if( Key_Scan(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON ) {
 8000d1a:	e7d5      	b.n	8000cc8 <KEY_Task+0x8>
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	080070b0 	.word	0x080070b0
 8000d24:	20000168 	.word	0x20000168
 8000d28:	080070c4 	.word	0x080070c4
 8000d2c:	080070e0 	.word	0x080070e0
 8000d30:	080070f0 	.word	0x080070f0

08000d34 <RTOS_BSP_Init>:
 * @param  无
 * @retval 无
 * @note   只处理FreeRTOS特定的初始化，硬件初始化由main.c完成
 */
static void RTOS_BSP_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    /*
     * 配置中断优先级分组为4，即4bit都用来表示抢占优先级，范围为：0~15
     * FreeRTOS推荐使用NVIC_PRIORITYGROUP_4
     * 注意：这个设置会影响整个系统的中断优先级，需要在任务创建前设置
     */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f990 	bl	800105e <HAL_NVIC_SetPriorityGrouping>

    /* 简单的LED功能测试（GPIO已经在main.c中初始化） */
    LED1_ON;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2104      	movs	r1, #4
 8000d42:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <RTOS_BSP_Init+0x30>)
 8000d44:	f000 fb52 	bl	80013ec <HAL_GPIO_WritePin>
    HAL_Delay(100);  // 短暂点亮LED测试硬件是否正常
 8000d48:	2064      	movs	r0, #100	@ 0x64
 8000d4a:	f000 f8b7 	bl	8000ebc <HAL_Delay>
    LED1_OFF;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2104      	movs	r1, #4
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <RTOS_BSP_Init+0x30>)
 8000d54:	f000 fb4a 	bl	80013ec <HAL_GPIO_WritePin>

    printf("FreeRTOS BSP Init successful\r\n");
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <RTOS_BSP_Init+0x34>)
 8000d5a:	f005 fd1d 	bl	8006798 <puts>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	48000400 	.word	0x48000400
 8000d68:	0800710c 	.word	0x0800710c

08000d6c <vApplicationGetIdleTaskMemory>:
 * @retval 无
 */
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
                                   StackType_t **ppxIdleTaskStackBuffer,
                                   uint32_t *pulIdleTaskStackSize)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &Idle_Task_TCB;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d7c:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = Idle_Task_Stack;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <vApplicationGetIdleTaskMemory+0x30>)
 8000d82:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000e84 	.word	0x20000e84
 8000d9c:	20000884 	.word	0x20000884

08000da0 <vApplicationGetTimerTaskMemory>:
 * @retval 无
 */
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
    *ppxTimerTaskTCBBuffer = &Timer_Task_TCB;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <vApplicationGetTimerTaskMemory+0x2c>)
 8000db0:	601a      	str	r2, [r3, #0]
    *ppxTimerTaskStackBuffer = Timer_Task_Stack;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <vApplicationGetTimerTaskMemory+0x30>)
 8000db6:	601a      	str	r2, [r3, #0]
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20000ee0 	.word	0x20000ee0
 8000dd0:	20000a84 	.word	0x20000a84

08000dd4 <__io_putchar>:
/*
 * STM32CubeIDE使用的是 gcc 编译器，它会内建 __GNUC__ 宏定义，所以下面PUTCHAR_PROTOTYPE将会扩展为:
 *  int __io_putchar(int ch)
 */
PUTCHAR_PROTOTYPE
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    /* 调用STM32 HAL库的串口发送函数，将printf要打印的这个字符通过串口发送出去 */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ddc:	1d39      	adds	r1, r7, #4
 8000dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de2:	2201      	movs	r2, #1
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <__io_putchar+0x20>)
 8000de6:	f001 ffb3 	bl	8002d50 <HAL_UART_Transmit>
    return ch;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000dc 	.word	0x200000dc

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff fde8 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f005 fdeb 	bl	8006a00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fbd9 	bl	80005e0 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e30:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e3c:	080071c0 	.word	0x080071c0
  ldr r2, =_sbss
 8000e40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e44:	200022dc 	.word	0x200022dc

08000e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_IRQHandler>

08000e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f902 	bl	800105e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f7ff fc74 	bl	8000748 <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6c:	f7ff fc44 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000f3c 	.word	0x20000f3c

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000f3c 	.word	0x20000f3c

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	@ (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	@ 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff4c 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001086:	f7ff ff61 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 800108a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	6978      	ldr	r0, [r7, #20]
 8001092:	f7ff ffb1 	bl	8000ff8 <NVIC_EncodePriority>
 8001096:	4602      	mov	r2, r0
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff80 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff54 	bl	8000f68 <__NVIC_EnableIRQ>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	e154      	b.n	8001382 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8146 	beq.w	800137c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d005      	beq.n	8001108 <HAL_GPIO_Init+0x40>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b03      	cmp	r3, #3
 8001174:	d017      	beq.n	80011a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d123      	bne.n	80011fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	6939      	ldr	r1, [r7, #16]
 80011f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0203 	and.w	r2, r3, #3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80a0 	beq.w	800137c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123c:	4b58      	ldr	r3, [pc, #352]	@ (80013a0 <HAL_GPIO_Init+0x2d8>)
 800123e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001240:	4a57      	ldr	r2, [pc, #348]	@ (80013a0 <HAL_GPIO_Init+0x2d8>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6613      	str	r3, [r2, #96]	@ 0x60
 8001248:	4b55      	ldr	r3, [pc, #340]	@ (80013a0 <HAL_GPIO_Init+0x2d8>)
 800124a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001254:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <HAL_GPIO_Init+0x2dc>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800127e:	d019      	beq.n	80012b4 <HAL_GPIO_Init+0x1ec>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <HAL_GPIO_Init+0x2e0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_GPIO_Init+0x1e8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a48      	ldr	r2, [pc, #288]	@ (80013ac <HAL_GPIO_Init+0x2e4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d00d      	beq.n	80012ac <HAL_GPIO_Init+0x1e4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a47      	ldr	r2, [pc, #284]	@ (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x1e0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a46      	ldr	r2, [pc, #280]	@ (80013b4 <HAL_GPIO_Init+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_GPIO_Init+0x1dc>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e008      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012a4:	2307      	movs	r3, #7
 80012a6:	e006      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e004      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012b4:	2300      	movs	r3, #0
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c6:	4937      	ldr	r1, [pc, #220]	@ (80013a4 <HAL_GPIO_Init+0x2dc>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d4:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f8:	4a2f      	ldr	r2, [pc, #188]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001322:	4a25      	ldr	r2, [pc, #148]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800134c:	4a1a      	ldr	r2, [pc, #104]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	f47f aea3 	bne.w	80010d8 <HAL_GPIO_Init+0x10>
  }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	48001000 	.word	0x48001000
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e002      	b.n	8001410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <HAL_PWREx_GetVoltageRange+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001446:	d130      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001448:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001454:	d038      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800145e:	4a1e      	ldr	r2, [pc, #120]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001460:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2232      	movs	r2, #50	@ 0x32
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9b      	lsrs	r3, r3, #18
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147c:	e002      	b.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3b01      	subs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001490:	d102      	bne.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f2      	bne.n	800147e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a4:	d110      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e00f      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b6:	d007      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c0:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40007000 	.word	0x40007000
 80014dc:	20000000 	.word	0x20000000
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f000 bc02 	b.w	8001cfc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f8:	4b96      	ldr	r3, [pc, #600]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001502:	4b94      	ldr	r3, [pc, #592]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80e4 	beq.w	80016e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <HAL_RCC_OscConfig+0x4c>
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	f040 808b 	bne.w	800163e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b01      	cmp	r3, #1
 800152c:	f040 8087 	bne.w	800163e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001530:	4b88      	ldr	r3, [pc, #544]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x64>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e3d9      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	4b81      	ldr	r3, [pc, #516]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_RCC_OscConfig+0x7e>
 8001558:	4b7e      	ldr	r3, [pc, #504]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001560:	e005      	b.n	800156e <HAL_RCC_OscConfig+0x8a>
 8001562:	4b7c      	ldr	r3, [pc, #496]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800156e:	4293      	cmp	r3, r2
 8001570:	d223      	bcs.n	80015ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fdbe 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e3ba      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001586:	4b73      	ldr	r3, [pc, #460]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a72      	ldr	r2, [pc, #456]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b70      	ldr	r3, [pc, #448]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	496d      	ldr	r1, [pc, #436]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	4968      	ldr	r1, [pc, #416]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e025      	b.n	8001606 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ba:	4b66      	ldr	r3, [pc, #408]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a65      	ldr	r2, [pc, #404]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b63      	ldr	r3, [pc, #396]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4960      	ldr	r1, [pc, #384]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	495b      	ldr	r1, [pc, #364]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fd7e 	bl	80020f8 <RCC_SetFlashLatencyFromMSIRange>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e37a      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001606:	f000 fc81 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	4950      	ldr	r1, [pc, #320]	@ (8001758 <HAL_RCC_OscConfig+0x274>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a4e      	ldr	r2, [pc, #312]	@ (800175c <HAL_RCC_OscConfig+0x278>)
 8001624:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001626:	4b4e      	ldr	r3, [pc, #312]	@ (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f88c 	bl	8000748 <HAL_InitTick>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d052      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	e35e      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d032      	beq.n	80016ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001646:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a42      	ldr	r2, [pc, #264]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001652:	f7ff fc27 	bl	8000ea4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165a:	f7ff fc23 	bl	8000ea4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e347      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001678:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a35      	ldr	r2, [pc, #212]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4930      	ldr	r1, [pc, #192]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	492b      	ldr	r1, [pc, #172]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
 80016aa:	e01a      	b.n	80016e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ac:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a28      	ldr	r2, [pc, #160]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbf4 	bl	8000ea4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c0:	f7ff fbf0 	bl	8000ea4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e314      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1dc>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d073      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_OscConfig+0x21c>
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d10e      	bne.n	8001718 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d063      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2f0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d15f      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e2f1      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x24c>
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e025      	b.n	800177c <HAL_RCC_OscConfig+0x298>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001738:	d114      	bne.n	8001764 <HAL_RCC_OscConfig+0x280>
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a02      	ldr	r2, [pc, #8]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e013      	b.n	800177c <HAL_RCC_OscConfig+0x298>
 8001754:	40021000 	.word	0x40021000
 8001758:	08007168 	.word	0x08007168
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004
 8001764:	4ba0      	ldr	r3, [pc, #640]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a9f      	ldr	r2, [pc, #636]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b9d      	ldr	r3, [pc, #628]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a9c      	ldr	r2, [pc, #624]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fb8e 	bl	8000ea4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fb8a 	bl	8000ea4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e2ae      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179e:	4b92      	ldr	r3, [pc, #584]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x2a8>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb7a 	bl	8000ea4 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fb76 	bl	8000ea4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e29a      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c6:	4b88      	ldr	r3, [pc, #544]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2d0>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d060      	beq.n	80018a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x310>
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d116      	bne.n	8001822 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f4:	4b7c      	ldr	r3, [pc, #496]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x328>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e277      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b76      	ldr	r3, [pc, #472]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	4973      	ldr	r1, [pc, #460]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	e040      	b.n	80018a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d023      	beq.n	8001872 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182a:	4b6f      	ldr	r3, [pc, #444]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6e      	ldr	r2, [pc, #440]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fb35 	bl	8000ea4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fb31 	bl	8000ea4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e255      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	4b65      	ldr	r3, [pc, #404]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b62      	ldr	r3, [pc, #392]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	495f      	ldr	r1, [pc, #380]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b5d      	ldr	r3, [pc, #372]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a5c      	ldr	r2, [pc, #368]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fb11 	bl	8000ea4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fb0d 	bl	8000ea4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e231      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001898:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d03c      	beq.n	800192a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01c      	beq.n	80018f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b8:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	4a4a      	ldr	r2, [pc, #296]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff faec 	bl	8000ea4 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fae8 	bl	8000ea4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e20c      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e2:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ef      	beq.n	80018d0 <HAL_RCC_OscConfig+0x3ec>
 80018f0:	e01b      	b.n	800192a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f2:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f8:	4a3b      	ldr	r2, [pc, #236]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff facf 	bl	8000ea4 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff facb 	bl	8000ea4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1ef      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800191c:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1ef      	bne.n	800190a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80a6 	beq.w	8001a84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800193c:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10d      	bne.n	8001964 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	4a26      	ldr	r2, [pc, #152]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	@ 0x58
 8001954:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001960:	2301      	movs	r3, #1
 8001962:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <HAL_RCC_OscConfig+0x508>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d118      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001970:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <HAL_RCC_OscConfig+0x508>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_RCC_OscConfig+0x508>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197c:	f7ff fa92 	bl	8000ea4 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001984:	f7ff fa8e 	bl	8000ea4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1b2      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_RCC_OscConfig+0x508>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <HAL_RCC_OscConfig+0x4d8>
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ba:	e029      	b.n	8001a10 <HAL_RCC_OscConfig+0x52c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d115      	bne.n	80019f0 <HAL_RCC_OscConfig+0x50c>
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ca:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019da:	4a03      	ldr	r2, [pc, #12]	@ (80019e8 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x52c>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40007000 	.word	0x40007000
 80019f0:	4b9a      	ldr	r3, [pc, #616]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f6:	4a99      	ldr	r2, [pc, #612]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a00:	4b96      	ldr	r3, [pc, #600]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a06:	4a95      	ldr	r2, [pc, #596]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d016      	beq.n	8001a46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fa44 	bl	8000ea4 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff fa40 	bl	8000ea4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e162      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a36:	4b89      	ldr	r3, [pc, #548]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ed      	beq.n	8001a20 <HAL_RCC_OscConfig+0x53c>
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff fa2d 	bl	8000ea4 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff fa29 	bl	8000ea4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e14b      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a64:	4b7d      	ldr	r3, [pc, #500]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ed      	bne.n	8001a4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b78      	ldr	r3, [pc, #480]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	4a77      	ldr	r2, [pc, #476]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a98:	4b70      	ldr	r3, [pc, #448]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f9fc 	bl	8000ea4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab0:	f7ff f9f8 	bl	8000ea4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e11c      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac2:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ef      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x5cc>
 8001ad0:	e01b      	b.n	8001b0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad2:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad8:	4a60      	ldr	r2, [pc, #384]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f9df 	bl	8000ea4 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aea:	f7ff f9db 	bl	8000ea4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0ff      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001afc:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80f3 	beq.w	8001cfa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	f040 80c9 	bne.w	8001cb0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0203 	and.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d12c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d123      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d11b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d113      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	3b01      	subs	r3, #1
 8001b72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d109      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	3b01      	subs	r3, #1
 8001b86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d06b      	beq.n	8001c64 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d062      	beq.n	8001c58 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b92:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0ac      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001ba8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bae:	f7ff f979 	bl	8000ea4 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f975 	bl	8000ea4 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e099      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_RCC_OscConfig+0x77c>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001be4:	3a01      	subs	r2, #1
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bee:	0212      	lsls	r2, r2, #8
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bf6:	0852      	lsrs	r2, r2, #1
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0552      	lsls	r2, r2, #21
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c02:	0852      	lsrs	r2, r2, #1
 8001c04:	3a01      	subs	r2, #1
 8001c06:	0652      	lsls	r2, r2, #25
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c0e:	06d2      	lsls	r2, r2, #27
 8001c10:	430a      	orrs	r2, r1
 8001c12:	4912      	ldr	r1, [pc, #72]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c30:	f7ff f938 	bl	8000ea4 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f934 	bl	8000ea4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <HAL_RCC_OscConfig+0x778>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c56:	e050      	b.n	8001cfa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04f      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d144      	bne.n	8001cfa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a20      	ldr	r2, [pc, #128]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c88:	f7ff f90c 	bl	8000ea4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f908 	bl	8000ea4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e02c      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x7ac>
 8001cae:	e024      	b.n	8001cfa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f8ef 	bl	8000ea4 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff f8eb 	bl	8000ea4 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e00f      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4905      	ldr	r1, [pc, #20]	@ (8001d04 <HAL_RCC_OscConfig+0x820>)
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_RCC_OscConfig+0x824>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60cb      	str	r3, [r1, #12]
 8001cf4:	e001      	b.n	8001cfa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	feeefffc 	.word	0xfeeefffc

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0e7      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4970      	ldr	r1, [pc, #448]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0cf      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d908      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4960      	ldr	r1, [pc, #384]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d04c      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d121      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0a6      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	4b54      	ldr	r3, [pc, #336]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e09a      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e08e      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e086      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4943      	ldr	r1, [pc, #268]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff f856 	bl	8000ea4 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff f852 	bl	8000ea4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e06e      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d208      	bcs.n	8001e52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b2e      	ldr	r3, [pc, #184]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	492b      	ldr	r1, [pc, #172]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e52:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d210      	bcs.n	8001e82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e60:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 0207 	bic.w	r2, r3, #7
 8001e68:	4923      	ldr	r1, [pc, #140]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e70:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e036      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4918      	ldr	r1, [pc, #96]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4910      	ldr	r1, [pc, #64]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec0:	f000 f824 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	490b      	ldr	r1, [pc, #44]	@ (8001f00 <HAL_RCC_ClockConfig+0x1f4>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1fc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fc2f 	bl	8000748 <HAL_InitTick>
 8001eea:	4603      	mov	r3, r0
 8001eec:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eee:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08007168 	.word	0x08007168
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f24:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d11e      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f40:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f4c:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e005      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10d      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	e004      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d134      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d003      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xac>
 8001fb0:	e005      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb4:	617b      	str	r3, [r7, #20]
      break;
 8001fb6:	e005      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fba:	617b      	str	r3, [r7, #20]
      break;
 8001fbc:	e002      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	617b      	str	r3, [r7, #20]
      break;
 8001fc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	3301      	adds	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	fb03 f202 	mul.w	r2, r3, r2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	0e5b      	lsrs	r3, r3, #25
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002004:	69bb      	ldr	r3, [r7, #24]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	08007180 	.word	0x08007180
 800201c:	00f42400 	.word	0x00f42400
 8002020:	007a1200 	.word	0x007a1200

08002024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4904      	ldr	r1, [pc, #16]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	08007178 	.word	0x08007178

08002068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800206c:	f7ff ffda 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0adb      	lsrs	r3, r3, #11
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4904      	ldr	r1, [pc, #16]	@ (8002090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	08007178 	.word	0x08007178

08002094 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	220f      	movs	r2, #15
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020b0:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_GetClockConfig+0x5c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_RCC_GetClockConfig+0x60>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0207 	and.w	r2, r3, #7
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40022000 	.word	0x40022000

080020f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002104:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f984 	bl	800141c <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
 8002116:	e014      	b.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	@ 0x58
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff f974 	bl	800141c <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002148:	d10b      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	@ 0x80
 800214e:	d919      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2ba0      	cmp	r3, #160	@ 0xa0
 8002154:	d902      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002156:	2302      	movs	r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e013      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e010      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b80      	cmp	r3, #128	@ 0x80
 8002166:	d902      	bls.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002168:	2303      	movs	r3, #3
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e00a      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	@ 0x80
 8002172:	d102      	bne.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002174:	2302      	movs	r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e004      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b70      	cmp	r3, #112	@ 0x70
 800217e:	d101      	bne.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0207 	bic.w	r2, r3, #7
 800218c:	4909      	ldr	r1, [pc, #36]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c0:	2300      	movs	r3, #0
 80021c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d031      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021dc:	d01a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021e2:	d814      	bhi.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021ec:	d10f      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021fa:	e00c      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f9f0 	bl	80025e8 <RCCEx_PLLSAI1_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220c:	e003      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	74fb      	strb	r3, [r7, #19]
      break;
 8002212:	e000      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800221c:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	494e      	ldr	r1, [pc, #312]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002232:	e001      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 809e 	beq.w	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800224a:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b40      	ldr	r3, [pc, #256]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	4a3f      	ldr	r2, [pc, #252]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	@ 0x58
 800226c:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227c:	4b3a      	ldr	r3, [pc, #232]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a39      	ldr	r2, [pc, #228]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002288:	f7fe fe0c 	bl	8000ea4 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800228e:	e009      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7fe fe08 	bl	8000ea4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d902      	bls.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	74fb      	strb	r3, [r7, #19]
        break;
 80022a2:	e005      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ef      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d15a      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01e      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d019      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022de:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022fe:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d016      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fdc8 	bl	8000ea4 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002316:	e00b      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fdc4 	bl	8000ea4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d902      	bls.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	74fb      	strb	r3, [r7, #19]
            break;
 800232e:	e006      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002330:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ec      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	4904      	ldr	r1, [pc, #16]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800235a:	e009      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
 8002360:	e006      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002370:	7c7b      	ldrb	r3, [r7, #17]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b9b      	ldr	r3, [pc, #620]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	4a9a      	ldr	r2, [pc, #616]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238e:	4b95      	ldr	r3, [pc, #596]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	f023 0203 	bic.w	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4991      	ldr	r1, [pc, #580]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b0:	4b8c      	ldr	r3, [pc, #560]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	f023 020c 	bic.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	4989      	ldr	r1, [pc, #548]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d2:	4b84      	ldr	r3, [pc, #528]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	4980      	ldr	r1, [pc, #512]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f4:	4b7b      	ldr	r3, [pc, #492]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	4978      	ldr	r1, [pc, #480]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002416:	4b73      	ldr	r3, [pc, #460]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	496f      	ldr	r1, [pc, #444]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002438:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	4967      	ldr	r1, [pc, #412]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245a:	4b62      	ldr	r3, [pc, #392]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	495e      	ldr	r1, [pc, #376]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247c:	4b59      	ldr	r3, [pc, #356]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	4956      	ldr	r1, [pc, #344]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249e:	4b51      	ldr	r3, [pc, #324]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	494d      	ldr	r1, [pc, #308]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d028      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024c0:	4b48      	ldr	r3, [pc, #288]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ce:	4945      	ldr	r1, [pc, #276]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024de:	d106      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e0:	4b40      	ldr	r3, [pc, #256]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a3f      	ldr	r2, [pc, #252]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80024e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	e011      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024f6:	d10c      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f872 	bl	80025e8 <RCCEx_PLLSAI1_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d028      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	492d      	ldr	r1, [pc, #180]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800253c:	d106      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253e:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a28      	ldr	r2, [pc, #160]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002548:	60d3      	str	r3, [r2, #12]
 800254a:	e011      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002554:	d10c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f843 	bl	80025e8 <RCCEx_PLLSAI1_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258a:	4916      	ldr	r1, [pc, #88]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800259a:	d10c      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	2102      	movs	r1, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f820 	bl	80025e8 <RCCEx_PLLSAI1_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025c2:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d0:	4904      	ldr	r1, [pc, #16]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f6:	4b74      	ldr	r3, [pc, #464]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d018      	beq.n	8002634 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002602:	4b71      	ldr	r3, [pc, #452]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d10d      	bne.n	800262e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
       ||
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800261a:	4b6b      	ldr	r3, [pc, #428]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
       ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d047      	beq.n	80026be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e044      	b.n	80026be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d018      	beq.n	800266e <RCCEx_PLLSAI1_Config+0x86>
 800263c:	2b03      	cmp	r3, #3
 800263e:	d825      	bhi.n	800268c <RCCEx_PLLSAI1_Config+0xa4>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <RCCEx_PLLSAI1_Config+0x62>
 8002644:	2b02      	cmp	r3, #2
 8002646:	d009      	beq.n	800265c <RCCEx_PLLSAI1_Config+0x74>
 8002648:	e020      	b.n	800268c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800264a:	4b5f      	ldr	r3, [pc, #380]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d11d      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265a:	e01a      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800265c:	4b5a      	ldr	r3, [pc, #360]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d116      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266c:	e013      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800266e:	4b56      	ldr	r3, [pc, #344]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800267a:	4b53      	ldr	r3, [pc, #332]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800268a:	e006      	b.n	800269a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e004      	b.n	800269c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269a:	bf00      	nop
    }

    if(status == HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026a2:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	430b      	orrs	r3, r1
 80026b8:	4943      	ldr	r1, [pc, #268]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d17c      	bne.n	80027be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026c4:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3f      	ldr	r2, [pc, #252]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fe fbe8 	bl	8000ea4 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026d6:	e009      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d8:	f7fe fbe4 	bl	8000ea4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ea:	e005      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ec:	4b36      	ldr	r3, [pc, #216]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ef      	bne.n	80026d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d15f      	bne.n	80027be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d110      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002704:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800270c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6892      	ldr	r2, [r2, #8]
 8002714:	0211      	lsls	r1, r2, #8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	06d2      	lsls	r2, r2, #27
 800271c:	430a      	orrs	r2, r1
 800271e:	492a      	ldr	r1, [pc, #168]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	4313      	orrs	r3, r2
 8002722:	610b      	str	r3, [r1, #16]
 8002724:	e027      	b.n	8002776 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d112      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800272c:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002734:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
 800273c:	0211      	lsls	r1, r2, #8
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6912      	ldr	r2, [r2, #16]
 8002742:	0852      	lsrs	r2, r2, #1
 8002744:	3a01      	subs	r2, #1
 8002746:	0552      	lsls	r2, r2, #21
 8002748:	430a      	orrs	r2, r1
 800274a:	491f      	ldr	r1, [pc, #124]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
 8002750:	e011      	b.n	8002776 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002752:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800275a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6892      	ldr	r2, [r2, #8]
 8002762:	0211      	lsls	r1, r2, #8
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6952      	ldr	r2, [r2, #20]
 8002768:	0852      	lsrs	r2, r2, #1
 800276a:	3a01      	subs	r2, #1
 800276c:	0652      	lsls	r2, r2, #25
 800276e:	430a      	orrs	r2, r1
 8002770:	4915      	ldr	r1, [pc, #84]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002772:	4313      	orrs	r3, r2
 8002774:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002780:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fb8f 	bl	8000ea4 <HAL_GetTick>
 8002786:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002788:	e009      	b.n	800279e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800278a:	f7fe fb8b 	bl	8000ea4 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d902      	bls.n	800279e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	73fb      	strb	r3, [r7, #15]
          break;
 800279c:	e005      	b.n	80027aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ef      	beq.n	800278a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4903      	ldr	r1, [pc, #12]	@ (80027c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e049      	b.n	8002872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f841 	bl	800287a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f000 f9c4 	bl	8002b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d001      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e03b      	b.n	8002920 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_TIM_Base_Start_IT+0x9c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_TIM_Base_Start_IT+0x4e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d004      	beq.n	80028de <HAL_TIM_Base_Start_IT+0x4e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a15      	ldr	r2, [pc, #84]	@ (8002930 <HAL_TIM_Base_Start_IT+0xa0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d115      	bne.n	800290a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <HAL_TIM_Base_Start_IT+0xa4>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d015      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x8c>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f6:	d011      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	e008      	b.n	800291c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e000      	b.n	800291e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40014000 	.word	0x40014000
 8002934:	00010007 	.word	0x00010007

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8e9 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8db 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8ec 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8c3 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8b5 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8c6 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f89d 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f88f 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8a0 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f877 	bl	8002b5a <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f869 	bl	8002b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f87a 	bl	8002b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd fe12 	bl	80006c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8dd 	bl	8002c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00c      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8d5 	bl	8002ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f834 	bl	8002b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0220 	mvn.w	r2, #32
 8002b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f89d 	bl	8002c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a30      	ldr	r2, [pc, #192]	@ (8002c6c <TIM_Base_SetConfig+0xd4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <TIM_Base_SetConfig+0x20>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb6:	d108      	bne.n	8002bca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <TIM_Base_SetConfig+0xd4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0x52>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x52>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <TIM_Base_SetConfig+0xd8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x52>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <TIM_Base_SetConfig+0xdc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <TIM_Base_SetConfig+0xd4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0xa0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	@ (8002c70 <TIM_Base_SetConfig+0xd8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0xa0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a10      	ldr	r2, [pc, #64]	@ (8002c74 <TIM_Base_SetConfig+0xdc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d103      	bne.n	8002c40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f023 0201 	bic.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40014400 	.word	0x40014400

08002c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e040      	b.n	8002d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd febc 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	@ 0x24
 8002ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fb0c 	bl	8003318 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8af 	bl	8002e64 <UART_SetConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e01b      	b.n	8002d48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fb8b 	bl	800345c <UART_CheckIdleState>
 8002d46:	4603      	mov	r3, r0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	@ 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d177      	bne.n	8002e58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_UART_Transmit+0x24>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e070      	b.n	8002e5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2221      	movs	r2, #33	@ 0x21
 8002d84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d86:	f7fe f88d 	bl	8000ea4 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da4:	d108      	bne.n	8002db8 <HAL_UART_Transmit+0x68>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e003      	b.n	8002dc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dc0:	e02f      	b.n	8002e22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2180      	movs	r1, #128	@ 0x80
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fbed 	bl	80035ac <UART_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e03b      	b.n	8002e5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	881a      	ldrh	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df4:	b292      	uxth	r2, r2
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e007      	b.n	8002e10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1c9      	bne.n	8002dc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2140      	movs	r1, #64	@ 0x40
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fbb7 	bl	80035ac <UART_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e005      	b.n	8002e5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e68:	b08a      	sub	sp, #40	@ 0x28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b9e      	ldr	r3, [pc, #632]	@ (800310c <UART_SetConfig+0x2a8>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a93      	ldr	r2, [pc, #588]	@ (8003110 <UART_SetConfig+0x2ac>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a8a      	ldr	r2, [pc, #552]	@ (8003114 <UART_SetConfig+0x2b0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d126      	bne.n	8002f3c <UART_SetConfig+0xd8>
 8002eee:	4b8a      	ldr	r3, [pc, #552]	@ (8003118 <UART_SetConfig+0x2b4>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d81b      	bhi.n	8002f34 <UART_SetConfig+0xd0>
 8002efc:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <UART_SetConfig+0xa0>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f25 	.word	0x08002f25
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f2d 	.word	0x08002f2d
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1a:	e0ab      	b.n	8003074 <UART_SetConfig+0x210>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f22:	e0a7      	b.n	8003074 <UART_SetConfig+0x210>
 8002f24:	2304      	movs	r3, #4
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2a:	e0a3      	b.n	8003074 <UART_SetConfig+0x210>
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f32:	e09f      	b.n	8003074 <UART_SetConfig+0x210>
 8002f34:	2310      	movs	r3, #16
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3a:	e09b      	b.n	8003074 <UART_SetConfig+0x210>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a76      	ldr	r2, [pc, #472]	@ (800311c <UART_SetConfig+0x2b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d138      	bne.n	8002fb8 <UART_SetConfig+0x154>
 8002f46:	4b74      	ldr	r3, [pc, #464]	@ (8003118 <UART_SetConfig+0x2b4>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d82d      	bhi.n	8002fb0 <UART_SetConfig+0x14c>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <UART_SetConfig+0xf8>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	08002fb1 	.word	0x08002fb1
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fb1 	.word	0x08002fb1
 8002f74:	08002fb1 	.word	0x08002fb1
 8002f78:	08002fb1 	.word	0x08002fb1
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fb1 	.word	0x08002fb1
 8002f8c:	08002fa9 	.word	0x08002fa9
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f96:	e06d      	b.n	8003074 <UART_SetConfig+0x210>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e069      	b.n	8003074 <UART_SetConfig+0x210>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e065      	b.n	8003074 <UART_SetConfig+0x210>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e061      	b.n	8003074 <UART_SetConfig+0x210>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e05d      	b.n	8003074 <UART_SetConfig+0x210>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	@ (8003120 <UART_SetConfig+0x2bc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d125      	bne.n	800300e <UART_SetConfig+0x1aa>
 8002fc2:	4b55      	ldr	r3, [pc, #340]	@ (8003118 <UART_SetConfig+0x2b4>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fcc:	2b30      	cmp	r3, #48	@ 0x30
 8002fce:	d016      	beq.n	8002ffe <UART_SetConfig+0x19a>
 8002fd0:	2b30      	cmp	r3, #48	@ 0x30
 8002fd2:	d818      	bhi.n	8003006 <UART_SetConfig+0x1a2>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d00a      	beq.n	8002fee <UART_SetConfig+0x18a>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d814      	bhi.n	8003006 <UART_SetConfig+0x1a2>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <UART_SetConfig+0x182>
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d008      	beq.n	8002ff6 <UART_SetConfig+0x192>
 8002fe4:	e00f      	b.n	8003006 <UART_SetConfig+0x1a2>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fec:	e042      	b.n	8003074 <UART_SetConfig+0x210>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff4:	e03e      	b.n	8003074 <UART_SetConfig+0x210>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffc:	e03a      	b.n	8003074 <UART_SetConfig+0x210>
 8002ffe:	2308      	movs	r3, #8
 8003000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003004:	e036      	b.n	8003074 <UART_SetConfig+0x210>
 8003006:	2310      	movs	r3, #16
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300c:	e032      	b.n	8003074 <UART_SetConfig+0x210>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <UART_SetConfig+0x2ac>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d12a      	bne.n	800306e <UART_SetConfig+0x20a>
 8003018:	4b3f      	ldr	r3, [pc, #252]	@ (8003118 <UART_SetConfig+0x2b4>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003026:	d01a      	beq.n	800305e <UART_SetConfig+0x1fa>
 8003028:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800302c:	d81b      	bhi.n	8003066 <UART_SetConfig+0x202>
 800302e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003032:	d00c      	beq.n	800304e <UART_SetConfig+0x1ea>
 8003034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003038:	d815      	bhi.n	8003066 <UART_SetConfig+0x202>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <UART_SetConfig+0x1e2>
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003042:	d008      	beq.n	8003056 <UART_SetConfig+0x1f2>
 8003044:	e00f      	b.n	8003066 <UART_SetConfig+0x202>
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304c:	e012      	b.n	8003074 <UART_SetConfig+0x210>
 800304e:	2302      	movs	r3, #2
 8003050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003054:	e00e      	b.n	8003074 <UART_SetConfig+0x210>
 8003056:	2304      	movs	r3, #4
 8003058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305c:	e00a      	b.n	8003074 <UART_SetConfig+0x210>
 800305e:	2308      	movs	r3, #8
 8003060:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003064:	e006      	b.n	8003074 <UART_SetConfig+0x210>
 8003066:	2310      	movs	r3, #16
 8003068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306c:	e002      	b.n	8003074 <UART_SetConfig+0x210>
 800306e:	2310      	movs	r3, #16
 8003070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a25      	ldr	r2, [pc, #148]	@ (8003110 <UART_SetConfig+0x2ac>)
 800307a:	4293      	cmp	r3, r2
 800307c:	f040 808a 	bne.w	8003194 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003080:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003084:	2b08      	cmp	r3, #8
 8003086:	d824      	bhi.n	80030d2 <UART_SetConfig+0x26e>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0x22c>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030c3 	.word	0x080030c3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030d3 	.word	0x080030d3
 80030ac:	080030d3 	.word	0x080030d3
 80030b0:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7fe ffc2 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80030b8:	61f8      	str	r0, [r7, #28]
        break;
 80030ba:	e010      	b.n	80030de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <UART_SetConfig+0x2c0>)
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e00d      	b.n	80030de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe ff23 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 80030c6:	61f8      	str	r0, [r7, #28]
        break;
 80030c8:	e009      	b.n	80030de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
        break;
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8109 	beq.w	80032f8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d305      	bcc.n	8003102 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d912      	bls.n	8003128 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003108:	e0f6      	b.n	80032f8 <UART_SetConfig+0x494>
 800310a:	bf00      	nop
 800310c:	efff69f3 	.word	0xefff69f3
 8003110:	40008000 	.word	0x40008000
 8003114:	40013800 	.word	0x40013800
 8003118:	40021000 	.word	0x40021000
 800311c:	40004400 	.word	0x40004400
 8003120:	40004800 	.word	0x40004800
 8003124:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2200      	movs	r2, #0
 800312c:	461c      	mov	r4, r3
 800312e:	4615      	mov	r5, r2
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	022b      	lsls	r3, r5, #8
 800313a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800313e:	0222      	lsls	r2, r4, #8
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	6849      	ldr	r1, [r1, #4]
 8003144:	0849      	lsrs	r1, r1, #1
 8003146:	2000      	movs	r0, #0
 8003148:	4688      	mov	r8, r1
 800314a:	4681      	mov	r9, r0
 800314c:	eb12 0a08 	adds.w	sl, r2, r8
 8003150:	eb43 0b09 	adc.w	fp, r3, r9
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003162:	4650      	mov	r0, sl
 8003164:	4659      	mov	r1, fp
 8003166:	f7fd f833 	bl	80001d0 <__aeabi_uldivmod>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4613      	mov	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003178:	d308      	bcc.n	800318c <UART_SetConfig+0x328>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003180:	d204      	bcs.n	800318c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e0b5      	b.n	80032f8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003192:	e0b1      	b.n	80032f8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800319c:	d15d      	bne.n	800325a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800319e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d827      	bhi.n	80031f6 <UART_SetConfig+0x392>
 80031a6:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <UART_SetConfig+0x348>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031f7 	.word	0x080031f7
 80031bc:	080031e7 	.word	0x080031e7
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	080031f7 	.word	0x080031f7
 80031cc:	080031ef 	.word	0x080031ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d0:	f7fe ff34 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80031d4:	61f8      	str	r0, [r7, #28]
        break;
 80031d6:	e014      	b.n	8003202 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7fe ff46 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 80031dc:	61f8      	str	r0, [r7, #28]
        break;
 80031de:	e010      	b.n	8003202 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003314 <UART_SetConfig+0x4b0>)
 80031e2:	61fb      	str	r3, [r7, #28]
        break;
 80031e4:	e00d      	b.n	8003202 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e6:	f7fe fe91 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 80031ea:	61f8      	str	r0, [r7, #28]
        break;
 80031ec:	e009      	b.n	8003202 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f2:	61fb      	str	r3, [r7, #28]
        break;
 80031f4:	e005      	b.n	8003202 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d077      	beq.n	80032f8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005a      	lsls	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b0f      	cmp	r3, #15
 8003222:	d916      	bls.n	8003252 <UART_SetConfig+0x3ee>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322a:	d212      	bcs.n	8003252 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b29a      	uxth	r2, r3
 8003242:	8afb      	ldrh	r3, [r7, #22]
 8003244:	4313      	orrs	r3, r2
 8003246:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	8afa      	ldrh	r2, [r7, #22]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e052      	b.n	80032f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003258:	e04e      	b.n	80032f8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800325a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800325e:	2b08      	cmp	r3, #8
 8003260:	d827      	bhi.n	80032b2 <UART_SetConfig+0x44e>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <UART_SetConfig+0x404>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800328d 	.word	0x0800328d
 800326c:	08003295 	.word	0x08003295
 8003270:	0800329d 	.word	0x0800329d
 8003274:	080032b3 	.word	0x080032b3
 8003278:	080032a3 	.word	0x080032a3
 800327c:	080032b3 	.word	0x080032b3
 8003280:	080032b3 	.word	0x080032b3
 8003284:	080032b3 	.word	0x080032b3
 8003288:	080032ab 	.word	0x080032ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7fe fed6 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8003290:	61f8      	str	r0, [r7, #28]
        break;
 8003292:	e014      	b.n	80032be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003294:	f7fe fee8 	bl	8002068 <HAL_RCC_GetPCLK2Freq>
 8003298:	61f8      	str	r0, [r7, #28]
        break;
 800329a:	e010      	b.n	80032be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800329c:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <UART_SetConfig+0x4b0>)
 800329e:	61fb      	str	r3, [r7, #28]
        break;
 80032a0:	e00d      	b.n	80032be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a2:	f7fe fe33 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 80032a6:	61f8      	str	r0, [r7, #28]
        break;
 80032a8:	e009      	b.n	80032be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ae:	61fb      	str	r3, [r7, #28]
        break;
 80032b0:	e005      	b.n	80032be <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032bc:	bf00      	nop
    }

    if (pclk != 0U)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d019      	beq.n	80032f8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	085a      	lsrs	r2, r3, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	441a      	add	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	d909      	bls.n	80032f2 <UART_SetConfig+0x48e>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e4:	d205      	bcs.n	80032f2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	e002      	b.n	80032f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003304:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003308:	4618      	mov	r0, r3
 800330a:	3728      	adds	r7, #40	@ 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003312:	bf00      	nop
 8003314:	00f42400 	.word	0x00f42400

08003318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01a      	beq.n	800342e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003416:	d10a      	bne.n	800342e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
  }
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b098      	sub	sp, #96	@ 0x60
 8003460:	af02      	add	r7, sp, #8
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800346c:	f7fd fd1a 	bl	8000ea4 <HAL_GetTick>
 8003470:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d12e      	bne.n	80034de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	2200      	movs	r2, #0
 800348a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f88c 	bl	80035ac <UART_WaitOnFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d021      	beq.n	80034de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e6      	bne.n	800349a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e062      	b.n	80035a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d149      	bne.n	8003580 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f856 	bl	80035ac <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d03c      	beq.n	8003580 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	623b      	str	r3, [r7, #32]
   return(result);
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800351a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003524:	633b      	str	r3, [r7, #48]	@ 0x30
 8003526:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e6      	bne.n	8003506 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3308      	adds	r3, #8
 800353e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	60fb      	str	r3, [r7, #12]
   return(result);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3308      	adds	r3, #8
 8003556:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003558:	61fa      	str	r2, [r7, #28]
 800355a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	69b9      	ldr	r1, [r7, #24]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	617b      	str	r3, [r7, #20]
   return(result);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e5      	bne.n	8003538 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e011      	b.n	80035a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3758      	adds	r7, #88	@ 0x58
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035bc:	e04f      	b.n	800365e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d04b      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fd fc6d 	bl	8000ea4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <UART_WaitOnFlagUntilTimeout+0x30>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e04e      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d037      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b80      	cmp	r3, #128	@ 0x80
 80035f2:	d034      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b40      	cmp	r3, #64	@ 0x40
 80035f8:	d031      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b08      	cmp	r3, #8
 8003606:	d110      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2208      	movs	r2, #8
 800360e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f838 	bl	8003686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2208      	movs	r2, #8
 800361a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e029      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003638:	d111      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f81e 	bl	8003686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00f      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	429a      	cmp	r2, r3
 800367a:	d0a0      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003686:	b480      	push	{r7}
 8003688:	b095      	sub	sp, #84	@ 0x54
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e6      	bne.n	800368e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3308      	adds	r3, #8
 80036c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e5      	bne.n	80036c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d118      	bne.n	800372e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	60bb      	str	r3, [r7, #8]
   return(result);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f023 0310 	bic.w	r3, r3, #16
 8003710:	647b      	str	r3, [r7, #68]	@ 0x44
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	6979      	ldr	r1, [r7, #20]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	613b      	str	r3, [r7, #16]
   return(result);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e6      	bne.n	80036fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003742:	bf00      	nop
 8003744:	3754      	adds	r7, #84	@ 0x54
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <__NVIC_SetPriority>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	@ (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <SysTick_Handler+0x1c>)
 80037aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037ac:	f001 fe60 	bl	8005470 <xTaskGetSchedulerState>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037b6:	f002 fc57 	bl	8006068 <xPortSysTickHandler>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	e000e010 	.word	0xe000e010

080037c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037c8:	2100      	movs	r1, #0
 80037ca:	f06f 0004 	mvn.w	r0, #4
 80037ce:	f7ff ffbf 	bl	8003750 <__NVIC_SetPriority>
#endif
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037de:	f3ef 8305 	mrs	r3, IPSR
 80037e2:	603b      	str	r3, [r7, #0]
  return(result);
 80037e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037ea:	f06f 0305 	mvn.w	r3, #5
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	e00c      	b.n	800380c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037f2:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <osKernelInitialize+0x44>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037fa:	4b08      	ldr	r3, [pc, #32]	@ (800381c <osKernelInitialize+0x44>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e002      	b.n	800380c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800380c:	687b      	ldr	r3, [r7, #4]
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000f40 	.word	0x20000f40

08003820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003826:	f3ef 8305 	mrs	r3, IPSR
 800382a:	603b      	str	r3, [r7, #0]
  return(result);
 800382c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003832:	f06f 0305 	mvn.w	r3, #5
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	e010      	b.n	800385c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800383a:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <osKernelStart+0x48>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d109      	bne.n	8003856 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003842:	f7ff ffbf 	bl	80037c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <osKernelStart+0x48>)
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800384c:	f001 f9c2 	bl	8004bd4 <vTaskStartScheduler>
      stat = osOK;
 8003850:	2300      	movs	r3, #0
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	e002      	b.n	800385c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800385c:	687b      	ldr	r3, [r7, #4]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000f40 	.word	0x20000f40

0800386c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	@ 0x38
 8003870:	af04      	add	r7, sp, #16
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800387c:	f3ef 8305 	mrs	r3, IPSR
 8003880:	617b      	str	r3, [r7, #20]
  return(result);
 8003882:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003884:	2b00      	cmp	r3, #0
 8003886:	d17e      	bne.n	8003986 <osThreadNew+0x11a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d07b      	beq.n	8003986 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003892:	2318      	movs	r3, #24
 8003894:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d045      	beq.n	8003932 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <osThreadNew+0x48>
        name = attr->name;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <osThreadNew+0x6e>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b38      	cmp	r3, #56	@ 0x38
 80038cc:	d805      	bhi.n	80038da <osThreadNew+0x6e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <osThreadNew+0x72>
        return (NULL);
 80038da:	2300      	movs	r3, #0
 80038dc:	e054      	b.n	8003988 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <osThreadNew+0xa8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b5b      	cmp	r3, #91	@ 0x5b
 80038fc:	d90a      	bls.n	8003914 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <osThreadNew+0xa8>
        mem = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e010      	b.n	8003936 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10c      	bne.n	8003936 <osThreadNew+0xca>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d108      	bne.n	8003936 <osThreadNew+0xca>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <osThreadNew+0xca>
          mem = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e001      	b.n	8003936 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d110      	bne.n	800395e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003944:	9202      	str	r2, [sp, #8]
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fde6 	bl	8004524 <xTaskCreateStatic>
 8003958:	4603      	mov	r3, r0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e013      	b.n	8003986 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d110      	bne.n	8003986 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	b29a      	uxth	r2, r3
 8003968:	f107 0310 	add.w	r3, r7, #16
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fe34 	bl	80045e4 <xTaskCreate>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <osThreadNew+0x11a>
            hTask = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003986:	693b      	ldr	r3, [r7, #16]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	@ 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003998:	f3ef 8305 	mrs	r3, IPSR
 800399c:	60bb      	str	r3, [r7, #8]
  return(result);
 800399e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <osDelay+0x1c>
    stat = osErrorISR;
 80039a4:	f06f 0305 	mvn.w	r3, #5
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e007      	b.n	80039bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 ffce 	bl	8004958 <vTaskDelay>
    }
  }

  return (stat);
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 0208 	add.w	r2, r3, #8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0208 	add.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f103 0208 	add.w	r2, r3, #8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d103      	bne.n	8003a88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e00c      	b.n	8003aa2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e002      	b.n	8003a96 <vListInsert+0x2e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d2f6      	bcs.n	8003a90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6852      	ldr	r2, [r2, #4]
 8003afa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d103      	bne.n	8003b0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1e5a      	subs	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b5c:	f002 f9f4 	bl	8005f48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	441a      	add	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	22ff      	movs	r2, #255	@ 0xff
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	22ff      	movs	r2, #255	@ 0xff
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d114      	bne.n	8003bdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3310      	adds	r3, #16
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fa96 	bl	80050f0 <xTaskRemoveFromEventList>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <xQueueGenericReset+0xd0>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e009      	b.n	8003bf0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3310      	adds	r3, #16
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fef0 	bl	80039c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3324      	adds	r3, #36	@ 0x24
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff feeb 	bl	80039c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bf0:	f002 f9dc 	bl	8005fac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <xQueueGenericCreateStatic+0x56>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xQueueGenericCreateStatic+0x5a>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueGenericCreateStatic+0x5c>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	623b      	str	r3, [r7, #32]
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <xQueueGenericCreateStatic+0x84>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <xQueueGenericCreateStatic+0x88>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <xQueueGenericCreateStatic+0x8a>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	61fb      	str	r3, [r7, #28]
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	e7fd      	b.n	8003ca6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003caa:	2350      	movs	r3, #80	@ 0x50
 8003cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b50      	cmp	r3, #80	@ 0x50
 8003cb2:	d00b      	beq.n	8003ccc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61bb      	str	r3, [r7, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ccc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ce0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f805 	bl	8003cfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3730      	adds	r7, #48	@ 0x30
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e002      	b.n	8003d20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	69b8      	ldr	r0, [r7, #24]
 8003d30:	f7ff fefe 	bl	8003b30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	@ 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <xQueueGenericSend+0x34>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <xQueueGenericSend+0x42>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <xQueueGenericSend+0x46>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <xQueueGenericSend+0x48>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <xQueueGenericSend+0x64>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d103      	bne.n	8003db6 <xQueueGenericSend+0x72>
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <xQueueGenericSend+0x76>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueGenericSend+0x78>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <xQueueGenericSend+0x94>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dd8:	f001 fb4a 	bl	8005470 <xTaskGetSchedulerState>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xQueueGenericSend+0xa4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <xQueueGenericSend+0xa8>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <xQueueGenericSend+0xaa>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <xQueueGenericSend+0xc6>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	61fb      	str	r3, [r7, #28]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e0a:	f002 f89d 	bl	8005f48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <xQueueGenericSend+0xdc>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d129      	bne.n	8003e74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e26:	f000 fa0f 	bl	8004248 <prvCopyDataToQueue>
 8003e2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	3324      	adds	r3, #36	@ 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 f959 	bl	80050f0 <xTaskRemoveFromEventList>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e44:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <xQueueGenericSend+0x200>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	e00a      	b.n	8003e6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e5c:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <xQueueGenericSend+0x200>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e6c:	f002 f89e 	bl	8005fac <vPortExitCritical>
				return pdPASS;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e063      	b.n	8003f3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e7a:	f002 f897 	bl	8005fac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e05c      	b.n	8003f3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f993 	bl	80051b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e96:	f002 f889 	bl	8005fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e9a:	f000 ff03 	bl	8004ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e9e:	f002 f853 	bl	8005f48 <vPortEnterCritical>
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ea8:	b25b      	sxtb	r3, r3
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d103      	bne.n	8003eb8 <xQueueGenericSend+0x174>
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <xQueueGenericSend+0x18a>
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ece:	f002 f86d 	bl	8005fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed2:	1d3a      	adds	r2, r7, #4
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f982 	bl	80051e4 <xTaskCheckForTimeOut>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d124      	bne.n	8003f30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ee6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ee8:	f000 faa6 	bl	8004438 <prvIsQueueFull>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	3310      	adds	r3, #16
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f8a6 	bl	800504c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f02:	f000 fa31 	bl	8004368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f06:	f000 fedb 	bl	8004cc0 <xTaskResumeAll>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f af7c 	bne.w	8003e0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <xQueueGenericSend+0x200>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	e772      	b.n	8003e0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f26:	f000 fa1f 	bl	8004368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2a:	f000 fec9 	bl	8004cc0 <xTaskResumeAll>
 8003f2e:	e76c      	b.n	8003e0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f32:	f000 fa19 	bl	8004368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f36:	f000 fec3 	bl	8004cc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3738      	adds	r7, #56	@ 0x38
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b090      	sub	sp, #64	@ 0x40
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <xQueueGenericSendFromISR+0x3e>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <xQueueGenericSendFromISR+0x42>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <xQueueGenericSendFromISR+0x44>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSendFromISR+0x6e>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <xQueueGenericSendFromISR+0x72>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <xQueueGenericSendFromISR+0x74>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	623b      	str	r3, [r7, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fd8:	f002 f896 	bl	8006108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fdc:	f3ef 8211 	mrs	r2, BASEPRI
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	61fa      	str	r2, [r7, #28]
 8003ff2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <xQueueGenericSendFromISR+0xc2>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d12f      	bne.n	800406a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004020:	f000 f912 	bl	8004248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004024:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d112      	bne.n	8004054 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	3324      	adds	r3, #36	@ 0x24
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f858 	bl	80050f0 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e007      	b.n	8004064 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004054:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004058:	3301      	adds	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	b25a      	sxtb	r2, r3
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004068:	e001      	b.n	800406e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800406a:	2300      	movs	r3, #0
 800406c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004070:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004078:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800407c:	4618      	mov	r0, r3
 800407e:	3740      	adds	r7, #64	@ 0x40
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	@ 0x30
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <xQueueReceive+0x32>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	623b      	str	r3, [r7, #32]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <xQueueReceive+0x40>
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueReceive+0x44>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueReceive+0x46>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xQueueReceive+0x62>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61fb      	str	r3, [r7, #28]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e6:	f001 f9c3 	bl	8005470 <xTaskGetSchedulerState>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xQueueReceive+0x72>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <xQueueReceive+0x76>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <xQueueReceive+0x78>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <xQueueReceive+0x94>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61bb      	str	r3, [r7, #24]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004118:	f001 ff16 	bl	8005f48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01f      	beq.n	8004168 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800412c:	f000 f8f6 	bl	800431c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	1e5a      	subs	r2, r3, #1
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00f      	beq.n	8004160 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	3310      	adds	r3, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f000 ffd3 	bl	80050f0 <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004150:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <xQueueReceive+0x1c0>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004160:	f001 ff24 	bl	8005fac <vPortExitCritical>
				return pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	e069      	b.n	800423c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800416e:	f001 ff1d 	bl	8005fac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004172:	2300      	movs	r3, #0
 8004174:	e062      	b.n	800423c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	f107 0310 	add.w	r3, r7, #16
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f819 	bl	80051b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800418a:	f001 ff0f 	bl	8005fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800418e:	f000 fd89 	bl	8004ca4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004192:	f001 fed9 	bl	8005f48 <vPortEnterCritical>
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <xQueueReceive+0x128>
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <xQueueReceive+0x13e>
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c2:	f001 fef3 	bl	8005fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f808 	bl	80051e4 <xTaskCheckForTimeOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d123      	bne.n	8004222 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041dc:	f000 f916 	bl	800440c <prvIsQueueEmpty>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d017      	beq.n	8004216 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	3324      	adds	r3, #36	@ 0x24
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 ff2c 	bl	800504c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041f6:	f000 f8b7 	bl	8004368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041fa:	f000 fd61 	bl	8004cc0 <xTaskResumeAll>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d189      	bne.n	8004118 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004204:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <xQueueReceive+0x1c0>)
 8004206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	e780      	b.n	8004118 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004218:	f000 f8a6 	bl	8004368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800421c:	f000 fd50 	bl	8004cc0 <xTaskResumeAll>
 8004220:	e77a      	b.n	8004118 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004224:	f000 f8a0 	bl	8004368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004228:	f000 fd4a 	bl	8004cc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800422c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800422e:	f000 f8ed 	bl	800440c <prvIsQueueEmpty>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	f43f af6f 	beq.w	8004118 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800423a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800423c:	4618      	mov	r0, r3
 800423e:	3730      	adds	r7, #48	@ 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10d      	bne.n	8004282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d14d      	bne.n	800430a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f001 f91a 	bl	80054ac <xTaskPriorityDisinherit>
 8004278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	e043      	b.n	800430a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d119      	bne.n	80042bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6858      	ldr	r0, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	461a      	mov	r2, r3
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	f002 fbdb 	bl	8006a4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d32b      	bcc.n	800430a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	e026      	b.n	800430a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68d8      	ldr	r0, [r3, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	461a      	mov	r2, r3
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	f002 fbc1 	bl	8006a4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	425b      	negs	r3, r3
 80042d6:	441a      	add	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d207      	bcs.n	80042f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	425b      	negs	r3, r3
 80042f2:	441a      	add	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d105      	bne.n	800430a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	441a      	add	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d303      	bcc.n	8004350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68d9      	ldr	r1, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	461a      	mov	r2, r3
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f002 fb77 	bl	8006a4e <memcpy>
	}
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004370:	f001 fdea 	bl	8005f48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800437a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800437c:	e011      	b.n	80043a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3324      	adds	r3, #36	@ 0x24
 800438a:	4618      	mov	r0, r3
 800438c:	f000 feb0 	bl	80050f0 <xTaskRemoveFromEventList>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004396:	f000 ff89 	bl	80052ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3b01      	subs	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dce9      	bgt.n	800437e <prvUnlockQueue+0x16>
 80043aa:	e000      	b.n	80043ae <prvUnlockQueue+0x46>
					break;
 80043ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	22ff      	movs	r2, #255	@ 0xff
 80043b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043b6:	f001 fdf9 	bl	8005fac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043ba:	f001 fdc5 	bl	8005f48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043c6:	e011      	b.n	80043ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3310      	adds	r3, #16
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fe8b 	bl	80050f0 <xTaskRemoveFromEventList>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043e0:	f000 ff64 	bl	80052ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043e4:	7bbb      	ldrb	r3, [r7, #14]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dce9      	bgt.n	80043c8 <prvUnlockQueue+0x60>
 80043f4:	e000      	b.n	80043f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	22ff      	movs	r2, #255	@ 0xff
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004400:	f001 fdd4 	bl	8005fac <vPortExitCritical>
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004414:	f001 fd98 	bl	8005f48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e001      	b.n	800442a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800442a:	f001 fdbf 	bl	8005fac <vPortExitCritical>

	return xReturn;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004440:	f001 fd82 	bl	8005f48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	429a      	cmp	r2, r3
 800444e:	d102      	bne.n	8004456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e001      	b.n	800445a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800445a:	f001 fda7 	bl	8005fac <vPortExitCritical>

	return xReturn;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e014      	b.n	80044a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004478:	4a0f      	ldr	r2, [pc, #60]	@ (80044b8 <vQueueAddToRegistry+0x50>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004484:	490c      	ldr	r1, [pc, #48]	@ (80044b8 <vQueueAddToRegistry+0x50>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <vQueueAddToRegistry+0x50>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800449a:	e006      	b.n	80044aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	d9e7      	bls.n	8004478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000f44 	.word	0x20000f44

080044bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044cc:	f001 fd3c 	bl	8005f48 <vPortEnterCritical>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044d6:	b25b      	sxtb	r3, r3
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d103      	bne.n	80044e6 <vQueueWaitForMessageRestricted+0x2a>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d103      	bne.n	80044fc <vQueueWaitForMessageRestricted+0x40>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044fc:	f001 fd56 	bl	8005fac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3324      	adds	r3, #36	@ 0x24
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fdc1 	bl	8005098 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff ff26 	bl	8004368 <prvUnlockQueue>
	}
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	@ 0x38
 8004528:	af04      	add	r7, sp, #16
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	623b      	str	r3, [r7, #32]
}
 800454a:	bf00      	nop
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	61fb      	str	r3, [r7, #28]
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	e7fd      	b.n	800456a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800456e:	235c      	movs	r3, #92	@ 0x5c
 8004570:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b5c      	cmp	r3, #92	@ 0x5c
 8004576:	d00b      	beq.n	8004590 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	61bb      	str	r3, [r7, #24]
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004590:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01e      	beq.n	80045d6 <xTaskCreateStatic+0xb2>
 8004598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01b      	beq.n	80045d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045b0:	2300      	movs	r3, #0
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f850 	bl	800466e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045d0:	f000 f8de 	bl	8004790 <prvAddNewTaskToReadyList>
 80045d4:	e001      	b.n	80045da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045da:	697b      	ldr	r3, [r7, #20]
	}
 80045dc:	4618      	mov	r0, r3
 80045de:	3728      	adds	r7, #40	@ 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	@ 0x30
 80045e8:	af04      	add	r7, sp, #16
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fdc7 	bl	800618c <pvPortMalloc>
 80045fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00e      	beq.n	8004624 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004606:	205c      	movs	r0, #92	@ 0x5c
 8004608:	f001 fdc0 	bl	800618c <pvPortMalloc>
 800460c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
 800461a:	e005      	b.n	8004628 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800461c:	6978      	ldr	r0, [r7, #20]
 800461e:	f001 fe83 	bl	8006328 <vPortFree>
 8004622:	e001      	b.n	8004628 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d017      	beq.n	800465e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	2300      	movs	r3, #0
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	9302      	str	r3, [sp, #8]
 8004640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f80e 	bl	800466e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004652:	69f8      	ldr	r0, [r7, #28]
 8004654:	f000 f89c 	bl	8004790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004658:	2301      	movs	r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e002      	b.n	8004664 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004664:	69bb      	ldr	r3, [r7, #24]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b088      	sub	sp, #32
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	461a      	mov	r2, r3
 8004686:	21a5      	movs	r1, #165	@ 0xa5
 8004688:	f002 f966 	bl	8006958 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004696:	3b01      	subs	r3, #1
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f023 0307 	bic.w	r3, r3, #7
 80046a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	617b      	str	r3, [r7, #20]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01f      	beq.n	800470e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e012      	b.n	80046fa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	7819      	ldrb	r1, [r3, #0]
 80046dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	3334      	adds	r3, #52	@ 0x34
 80046e4:	460a      	mov	r2, r1
 80046e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d9e9      	bls.n	80046d4 <prvInitialiseNewTask+0x66>
 8004700:	e000      	b.n	8004704 <prvInitialiseNewTask+0x96>
			{
				break;
 8004702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800470c:	e003      	b.n	8004716 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2b37      	cmp	r3, #55	@ 0x37
 800471a:	d901      	bls.n	8004720 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800471c:	2337      	movs	r3, #55	@ 0x37
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004724:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800472a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800472c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472e:	2200      	movs	r2, #0
 8004730:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	3304      	adds	r3, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff f965 	bl	8003a06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	3318      	adds	r3, #24
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff f960 	bl	8003a06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800474a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	2200      	movs	r2, #0
 8004760:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	69b8      	ldr	r0, [r7, #24]
 8004770:	f001 faba 	bl	8005ce8 <pxPortInitialiseStack>
 8004774:	4602      	mov	r2, r0
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004786:	bf00      	nop
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004798:	f001 fbd6 	bl	8005f48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800479c:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <prvAddNewTaskToReadyList+0xc4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004854 <prvAddNewTaskToReadyList+0xc4>)
 80047a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004858 <prvAddNewTaskToReadyList+0xc8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004858 <prvAddNewTaskToReadyList+0xc8>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047b4:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <prvAddNewTaskToReadyList+0xc4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d110      	bne.n	80047de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047bc:	f000 fd9a 	bl	80052f4 <prvInitialiseTaskLists>
 80047c0:	e00d      	b.n	80047de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047c2:	4b26      	ldr	r3, [pc, #152]	@ (800485c <prvAddNewTaskToReadyList+0xcc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047ca:	4b23      	ldr	r3, [pc, #140]	@ (8004858 <prvAddNewTaskToReadyList+0xc8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d802      	bhi.n	80047de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <prvAddNewTaskToReadyList+0xc8>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047de:	4b20      	ldr	r3, [pc, #128]	@ (8004860 <prvAddNewTaskToReadyList+0xd0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004860 <prvAddNewTaskToReadyList+0xd0>)
 80047e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <prvAddNewTaskToReadyList+0xd0>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <prvAddNewTaskToReadyList+0xd4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d903      	bls.n	8004804 <prvAddNewTaskToReadyList+0x74>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	4a18      	ldr	r2, [pc, #96]	@ (8004864 <prvAddNewTaskToReadyList+0xd4>)
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <prvAddNewTaskToReadyList+0xd8>)
 8004812:	441a      	add	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7ff f900 	bl	8003a20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004820:	f001 fbc4 	bl	8005fac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004824:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <prvAddNewTaskToReadyList+0xcc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800482c:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <prvAddNewTaskToReadyList+0xc8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	429a      	cmp	r2, r3
 8004838:	d207      	bcs.n	800484a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800483a:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <prvAddNewTaskToReadyList+0xdc>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20001458 	.word	0x20001458
 8004858:	20000f84 	.word	0x20000f84
 800485c:	20001464 	.word	0x20001464
 8004860:	20001474 	.word	0x20001474
 8004864:	20001460 	.word	0x20001460
 8004868:	20000f88 	.word	0x20000f88
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004878:	f001 fb66 	bl	8005f48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <vTaskDelete+0x18>
 8004882:	4b2d      	ldr	r3, [pc, #180]	@ (8004938 <vTaskDelete+0xc8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	e000      	b.n	800488a <vTaskDelete+0x1a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff f922 	bl	8003ada <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3318      	adds	r3, #24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f919 	bl	8003ada <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <vTaskDelete+0xcc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4a23      	ldr	r2, [pc, #140]	@ (800493c <vTaskDelete+0xcc>)
 80048b0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80048b2:	4b21      	ldr	r3, [pc, #132]	@ (8004938 <vTaskDelete+0xc8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d10b      	bne.n	80048d4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	481f      	ldr	r0, [pc, #124]	@ (8004940 <vTaskDelete+0xd0>)
 80048c4:	f7ff f8ac 	bl	8003a20 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80048c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <vTaskDelete+0xd4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <vTaskDelete+0xd4>)
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e009      	b.n	80048e8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80048d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004948 <vTaskDelete+0xd8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3b01      	subs	r3, #1
 80048da:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <vTaskDelete+0xd8>)
 80048dc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fd76 	bl	80053d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80048e4:	f000 fda4 	bl	8005430 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80048e8:	f001 fb60 	bl	8005fac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <vTaskDelete+0xdc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01c      	beq.n	800492e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80048f4:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <vTaskDelete+0xc8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d117      	bne.n	800492e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80048fe:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <vTaskDelete+0xe0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <vTaskDelete+0xae>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60bb      	str	r3, [r7, #8]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <vTaskDelete+0xe4>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000f84 	.word	0x20000f84
 800493c:	20001474 	.word	0x20001474
 8004940:	2000142c 	.word	0x2000142c
 8004944:	20001440 	.word	0x20001440
 8004948:	20001458 	.word	0x20001458
 800494c:	20001464 	.word	0x20001464
 8004950:	20001480 	.word	0x20001480
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <vTaskDelay+0x64>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <vTaskDelay+0x32>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800498a:	f000 f98b 	bl	8004ca4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800498e:	2100      	movs	r1, #0
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fdfb 	bl	800558c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004996:	f000 f993 	bl	8004cc0 <xTaskResumeAll>
 800499a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049a2:	4b07      	ldr	r3, [pc, #28]	@ (80049c0 <vTaskDelay+0x68>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20001480 	.word	0x20001480
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80049cc:	f001 fabc 	bl	8005f48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <vTaskSuspend+0x18>
 80049d6:	4b30      	ldr	r3, [pc, #192]	@ (8004a98 <vTaskSuspend+0xd4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	e000      	b.n	80049de <vTaskSuspend+0x1a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f878 	bl	8003ada <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3318      	adds	r3, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff f86f 	bl	8003ada <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4826      	ldr	r0, [pc, #152]	@ (8004a9c <vTaskSuspend+0xd8>)
 8004a04:	f7ff f80c 	bl	8003a20 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d103      	bne.n	8004a1c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004a1c:	f001 fac6 	bl	8005fac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004a20:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa0 <vTaskSuspend+0xdc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004a28:	f001 fa8e 	bl	8005f48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004a2c:	f000 fd00 	bl	8005430 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004a30:	f001 fabc 	bl	8005fac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004a34:	4b18      	ldr	r3, [pc, #96]	@ (8004a98 <vTaskSuspend+0xd4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d128      	bne.n	8004a90 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004a3e:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <vTaskSuspend+0xdc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004a46:	4b17      	ldr	r3, [pc, #92]	@ (8004aa4 <vTaskSuspend+0xe0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <vTaskSuspend+0xa2>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	60bb      	str	r3, [r7, #8]
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	e7fd      	b.n	8004a62 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8004a66:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <vTaskSuspend+0xe4>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a76:	e00b      	b.n	8004a90 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004a78:	4b08      	ldr	r3, [pc, #32]	@ (8004a9c <vTaskSuspend+0xd8>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <vTaskSuspend+0xe8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d103      	bne.n	8004a8c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <vTaskSuspend+0xd4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
	}
 8004a8a:	e001      	b.n	8004a90 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8004a8c:	f000 fa80 	bl	8004f90 <vTaskSwitchContext>
	}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000f84 	.word	0x20000f84
 8004a9c:	20001444 	.word	0x20001444
 8004aa0:	20001464 	.word	0x20001464
 8004aa4:	20001480 	.word	0x20001480
 8004aa8:	e000ed04 	.word	0xe000ed04
 8004aac:	20001458 	.word	0x20001458

08004ab0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60fb      	str	r3, [r7, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <prvTaskIsTaskSuspended+0x5c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10a      	bne.n	8004afe <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <prvTaskIsTaskSuspended+0x60>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d005      	beq.n	8004afe <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004afe:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20001444 	.word	0x20001444
 8004b10:	20001418 	.word	0x20001418

08004b14 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <vTaskResume+0x2a>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004b3e:	4b21      	ldr	r3, [pc, #132]	@ (8004bc4 <vTaskResume+0xb0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d038      	beq.n	8004bba <vTaskResume+0xa6>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d035      	beq.n	8004bba <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8004b4e:	f001 f9fb 	bl	8005f48 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ffac 	bl	8004ab0 <prvTaskIsTaskSuspended>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d02b      	beq.n	8004bb6 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe ffb9 	bl	8003ada <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6c:	4b16      	ldr	r3, [pc, #88]	@ (8004bc8 <vTaskResume+0xb4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <vTaskResume+0x68>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	4a13      	ldr	r2, [pc, #76]	@ (8004bc8 <vTaskResume+0xb4>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4a10      	ldr	r2, [pc, #64]	@ (8004bcc <vTaskResume+0xb8>)
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe ff44 	bl	8003a20 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b9c:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <vTaskResume+0xb0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d307      	bcc.n	8004bb6 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <vTaskResume+0xbc>)
 8004ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004bb6:	f001 f9f9 	bl	8005fac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000f84 	.word	0x20000f84
 8004bc8:	20001460 	.word	0x20001460
 8004bcc:	20000f88 	.word	0x20000f88
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	@ 0x28
 8004bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004be2:	463a      	mov	r2, r7
 8004be4:	1d39      	adds	r1, r7, #4
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc f8be 	bl	8000d6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	9202      	str	r2, [sp, #8]
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	460a      	mov	r2, r1
 8004c02:	4922      	ldr	r1, [pc, #136]	@ (8004c8c <vTaskStartScheduler+0xb8>)
 8004c04:	4822      	ldr	r0, [pc, #136]	@ (8004c90 <vTaskStartScheduler+0xbc>)
 8004c06:	f7ff fc8d 	bl	8004524 <xTaskCreateStatic>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4a21      	ldr	r2, [pc, #132]	@ (8004c94 <vTaskStartScheduler+0xc0>)
 8004c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c10:	4b20      	ldr	r3, [pc, #128]	@ (8004c94 <vTaskStartScheduler+0xc0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e001      	b.n	8004c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d102      	bne.n	8004c2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c28:	f000 fd04 	bl	8005634 <xTimerCreateTimerTask>
 8004c2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d116      	bne.n	8004c62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	613b      	str	r3, [r7, #16]
}
 8004c46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c48:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <vTaskStartScheduler+0xc4>)
 8004c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c50:	4b12      	ldr	r3, [pc, #72]	@ (8004c9c <vTaskStartScheduler+0xc8>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c56:	4b12      	ldr	r3, [pc, #72]	@ (8004ca0 <vTaskStartScheduler+0xcc>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c5c:	f001 f8d0 	bl	8005e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c60:	e00f      	b.n	8004c82 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d10b      	bne.n	8004c82 <vTaskStartScheduler+0xae>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <vTaskStartScheduler+0xaa>
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	0800712c 	.word	0x0800712c
 8004c90:	080052c5 	.word	0x080052c5
 8004c94:	2000147c 	.word	0x2000147c
 8004c98:	20001478 	.word	0x20001478
 8004c9c:	20001464 	.word	0x20001464
 8004ca0:	2000145c 	.word	0x2000145c

08004ca4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ca8:	4b04      	ldr	r3, [pc, #16]	@ (8004cbc <vTaskSuspendAll+0x18>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4a03      	ldr	r2, [pc, #12]	@ (8004cbc <vTaskSuspendAll+0x18>)
 8004cb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cb2:	bf00      	nop
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	20001480 	.word	0x20001480

08004cc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cce:	4b42      	ldr	r3, [pc, #264]	@ (8004dd8 <xTaskResumeAll+0x118>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <xTaskResumeAll+0x2e>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	603b      	str	r3, [r7, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cee:	f001 f92b 	bl	8005f48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cf2:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <xTaskResumeAll+0x118>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4a37      	ldr	r2, [pc, #220]	@ (8004dd8 <xTaskResumeAll+0x118>)
 8004cfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfc:	4b36      	ldr	r3, [pc, #216]	@ (8004dd8 <xTaskResumeAll+0x118>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d162      	bne.n	8004dca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d04:	4b35      	ldr	r3, [pc, #212]	@ (8004ddc <xTaskResumeAll+0x11c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d05e      	beq.n	8004dca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d0c:	e02f      	b.n	8004d6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0e:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <xTaskResumeAll+0x120>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3318      	adds	r3, #24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fedd 	bl	8003ada <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fed8 	bl	8003ada <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004de4 <xTaskResumeAll+0x124>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d903      	bls.n	8004d3e <xTaskResumeAll+0x7e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <xTaskResumeAll+0x124>)
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <xTaskResumeAll+0x128>)
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fe fe63 	bl	8003a20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5e:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <xTaskResumeAll+0x12c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d68:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <xTaskResumeAll+0x130>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004de0 <xTaskResumeAll+0x120>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1cb      	bne.n	8004d0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d7c:	f000 fb58 	bl	8005430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d80:	4b1c      	ldr	r3, [pc, #112]	@ (8004df4 <xTaskResumeAll+0x134>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d8c:	f000 f846 	bl	8004e1c <xTaskIncrementTick>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d96:	4b16      	ldr	r3, [pc, #88]	@ (8004df0 <xTaskResumeAll+0x130>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1f1      	bne.n	8004d8c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004da8:	4b12      	ldr	r3, [pc, #72]	@ (8004df4 <xTaskResumeAll+0x134>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dae:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <xTaskResumeAll+0x130>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004db6:	2301      	movs	r3, #1
 8004db8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dba:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <xTaskResumeAll+0x138>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dca:	f001 f8ef 	bl	8005fac <vPortExitCritical>

	return xAlreadyYielded;
 8004dce:	68bb      	ldr	r3, [r7, #8]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20001480 	.word	0x20001480
 8004ddc:	20001458 	.word	0x20001458
 8004de0:	20001418 	.word	0x20001418
 8004de4:	20001460 	.word	0x20001460
 8004de8:	20000f88 	.word	0x20000f88
 8004dec:	20000f84 	.word	0x20000f84
 8004df0:	2000146c 	.word	0x2000146c
 8004df4:	20001468 	.word	0x20001468
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <xTaskGetTickCount+0x1c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e08:	687b      	ldr	r3, [r7, #4]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	2000145c 	.word	0x2000145c

08004e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e26:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <xTaskIncrementTick+0x148>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 8090 	bne.w	8004f50 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e30:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <xTaskIncrementTick+0x14c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e38:	4a4b      	ldr	r2, [pc, #300]	@ (8004f68 <xTaskIncrementTick+0x14c>)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d121      	bne.n	8004e88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e44:	4b49      	ldr	r3, [pc, #292]	@ (8004f6c <xTaskIncrementTick+0x150>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	603b      	str	r3, [r7, #0]
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <xTaskIncrementTick+0x46>
 8004e66:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <xTaskIncrementTick+0x150>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <xTaskIncrementTick+0x154>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3e      	ldr	r2, [pc, #248]	@ (8004f6c <xTaskIncrementTick+0x150>)
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <xTaskIncrementTick+0x154>)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f74 <xTaskIncrementTick+0x158>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a3c      	ldr	r2, [pc, #240]	@ (8004f74 <xTaskIncrementTick+0x158>)
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	f000 fad4 	bl	8005430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e88:	4b3b      	ldr	r3, [pc, #236]	@ (8004f78 <xTaskIncrementTick+0x15c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d349      	bcc.n	8004f26 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e92:	4b36      	ldr	r3, [pc, #216]	@ (8004f6c <xTaskIncrementTick+0x150>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e9c:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <xTaskIncrementTick+0x15c>)
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	601a      	str	r2, [r3, #0]
					break;
 8004ea4:	e03f      	b.n	8004f26 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea6:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <xTaskIncrementTick+0x150>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d203      	bcs.n	8004ec6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8004f78 <xTaskIncrementTick+0x15c>)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ec4:	e02f      	b.n	8004f26 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fe05 	bl	8003ada <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3318      	adds	r3, #24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe fdfc 	bl	8003ada <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee6:	4b25      	ldr	r3, [pc, #148]	@ (8004f7c <xTaskIncrementTick+0x160>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d903      	bls.n	8004ef6 <xTaskIncrementTick+0xda>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	4a22      	ldr	r2, [pc, #136]	@ (8004f7c <xTaskIncrementTick+0x160>)
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4a1f      	ldr	r2, [pc, #124]	@ (8004f80 <xTaskIncrementTick+0x164>)
 8004f04:	441a      	add	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7fe fd87 	bl	8003a20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f16:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <xTaskIncrementTick+0x168>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3b8      	bcc.n	8004e92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f24:	e7b5      	b.n	8004e92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f26:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <xTaskIncrementTick+0x168>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2c:	4914      	ldr	r1, [pc, #80]	@ (8004f80 <xTaskIncrementTick+0x164>)
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d901      	bls.n	8004f42 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f42:	4b11      	ldr	r3, [pc, #68]	@ (8004f88 <xTaskIncrementTick+0x16c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e004      	b.n	8004f5a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f50:	4b0e      	ldr	r3, [pc, #56]	@ (8004f8c <xTaskIncrementTick+0x170>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a0d      	ldr	r2, [pc, #52]	@ (8004f8c <xTaskIncrementTick+0x170>)
 8004f58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f5a:	697b      	ldr	r3, [r7, #20]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20001480 	.word	0x20001480
 8004f68:	2000145c 	.word	0x2000145c
 8004f6c:	20001410 	.word	0x20001410
 8004f70:	20001414 	.word	0x20001414
 8004f74:	20001470 	.word	0x20001470
 8004f78:	20001478 	.word	0x20001478
 8004f7c:	20001460 	.word	0x20001460
 8004f80:	20000f88 	.word	0x20000f88
 8004f84:	20000f84 	.word	0x20000f84
 8004f88:	2000146c 	.word	0x2000146c
 8004f8c:	20001468 	.word	0x20001468

08004f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f96:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <vTaskSwitchContext+0xa8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f9e:	4b27      	ldr	r3, [pc, #156]	@ (800503c <vTaskSwitchContext+0xac>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fa4:	e042      	b.n	800502c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004fa6:	4b25      	ldr	r3, [pc, #148]	@ (800503c <vTaskSwitchContext+0xac>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fac:	4b24      	ldr	r3, [pc, #144]	@ (8005040 <vTaskSwitchContext+0xb0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e011      	b.n	8004fd8 <vTaskSwitchContext+0x48>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	607b      	str	r3, [r7, #4]
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <vTaskSwitchContext+0x3e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	491a      	ldr	r1, [pc, #104]	@ (8005044 <vTaskSwitchContext+0xb4>)
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0e3      	beq.n	8004fb4 <vTaskSwitchContext+0x24>
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <vTaskSwitchContext+0xb4>)
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	3308      	adds	r3, #8
 800500e:	429a      	cmp	r2, r3
 8005010:	d104      	bne.n	800501c <vTaskSwitchContext+0x8c>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <vTaskSwitchContext+0xb8>)
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4a06      	ldr	r2, [pc, #24]	@ (8005040 <vTaskSwitchContext+0xb0>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6013      	str	r3, [r2, #0]
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20001480 	.word	0x20001480
 800503c:	2000146c 	.word	0x2000146c
 8005040:	20001460 	.word	0x20001460
 8005044:	20000f88 	.word	0x20000f88
 8005048:	20000f84 	.word	0x20000f84

0800504c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	60fb      	str	r3, [r7, #12]
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005074:	4b07      	ldr	r3, [pc, #28]	@ (8005094 <vTaskPlaceOnEventList+0x48>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3318      	adds	r3, #24
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fe fcf3 	bl	8003a68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005082:	2101      	movs	r1, #1
 8005084:	6838      	ldr	r0, [r7, #0]
 8005086:	f000 fa81 	bl	800558c <prvAddCurrentTaskToDelayedList>
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000f84 	.word	0x20000f84

08005098 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	617b      	str	r3, [r7, #20]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <vTaskPlaceOnEventListRestricted+0x54>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3318      	adds	r3, #24
 80050c8:	4619      	mov	r1, r3
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7fe fca8 	bl	8003a20 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	68b8      	ldr	r0, [r7, #8]
 80050e0:	f000 fa54 	bl	800558c <prvAddCurrentTaskToDelayedList>
	}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000f84 	.word	0x20000f84

080050f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60fb      	str	r3, [r7, #12]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3318      	adds	r3, #24
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fcd9 	bl	8003ada <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005128:	4b1d      	ldr	r3, [pc, #116]	@ (80051a0 <xTaskRemoveFromEventList+0xb0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11d      	bne.n	800516c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fcd0 	bl	8003ada <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513e:	4b19      	ldr	r3, [pc, #100]	@ (80051a4 <xTaskRemoveFromEventList+0xb4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d903      	bls.n	800514e <xTaskRemoveFromEventList+0x5e>
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	4a16      	ldr	r2, [pc, #88]	@ (80051a4 <xTaskRemoveFromEventList+0xb4>)
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4a13      	ldr	r2, [pc, #76]	@ (80051a8 <xTaskRemoveFromEventList+0xb8>)
 800515c:	441a      	add	r2, r3
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3304      	adds	r3, #4
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f7fe fc5b 	bl	8003a20 <vListInsertEnd>
 800516a:	e005      	b.n	8005178 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3318      	adds	r3, #24
 8005170:	4619      	mov	r1, r3
 8005172:	480e      	ldr	r0, [pc, #56]	@ (80051ac <xTaskRemoveFromEventList+0xbc>)
 8005174:	f7fe fc54 	bl	8003a20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517c:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <xTaskRemoveFromEventList+0xc0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	429a      	cmp	r2, r3
 8005184:	d905      	bls.n	8005192 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800518a:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <xTaskRemoveFromEventList+0xc4>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e001      	b.n	8005196 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005196:	697b      	ldr	r3, [r7, #20]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20001480 	.word	0x20001480
 80051a4:	20001460 	.word	0x20001460
 80051a8:	20000f88 	.word	0x20000f88
 80051ac:	20001418 	.word	0x20001418
 80051b0:	20000f84 	.word	0x20000f84
 80051b4:	2000146c 	.word	0x2000146c

080051b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051c0:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <vTaskInternalSetTimeOutState+0x24>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <vTaskInternalSetTimeOutState+0x28>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20001470 	.word	0x20001470
 80051e0:	2000145c 	.word	0x2000145c

080051e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	613b      	str	r3, [r7, #16]
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10b      	bne.n	800522a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60fb      	str	r3, [r7, #12]
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800522a:	f000 fe8d 	bl	8005f48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <xTaskCheckForTimeOut+0xc0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d102      	bne.n	800524e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	e023      	b.n	8005296 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <xTaskCheckForTimeOut+0xc4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d007      	beq.n	800526a <xTaskCheckForTimeOut+0x86>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005264:	2301      	movs	r3, #1
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e015      	b.n	8005296 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	429a      	cmp	r2, r3
 8005272:	d20b      	bcs.n	800528c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff99 	bl	80051b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e004      	b.n	8005296 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005296:	f000 fe89 	bl	8005fac <vPortExitCritical>

	return xReturn;
 800529a:	69fb      	ldr	r3, [r7, #28]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	2000145c 	.word	0x2000145c
 80052a8:	20001470 	.word	0x20001470

080052ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052b0:	4b03      	ldr	r3, [pc, #12]	@ (80052c0 <vTaskMissedYield+0x14>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	2000146c 	.word	0x2000146c

080052c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052cc:	f000 f852 	bl	8005374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <prvIdleTask+0x28>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d9f9      	bls.n	80052cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <prvIdleTask+0x2c>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052e8:	e7f0      	b.n	80052cc <prvIdleTask+0x8>
 80052ea:	bf00      	nop
 80052ec:	20000f88 	.word	0x20000f88
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
 80052fe:	e00c      	b.n	800531a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <prvInitialiseTaskLists+0x60>)
 800530c:	4413      	add	r3, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fb59 	bl	80039c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3301      	adds	r3, #1
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b37      	cmp	r3, #55	@ 0x37
 800531e:	d9ef      	bls.n	8005300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005320:	480d      	ldr	r0, [pc, #52]	@ (8005358 <prvInitialiseTaskLists+0x64>)
 8005322:	f7fe fb50 	bl	80039c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005326:	480d      	ldr	r0, [pc, #52]	@ (800535c <prvInitialiseTaskLists+0x68>)
 8005328:	f7fe fb4d 	bl	80039c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800532c:	480c      	ldr	r0, [pc, #48]	@ (8005360 <prvInitialiseTaskLists+0x6c>)
 800532e:	f7fe fb4a 	bl	80039c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005332:	480c      	ldr	r0, [pc, #48]	@ (8005364 <prvInitialiseTaskLists+0x70>)
 8005334:	f7fe fb47 	bl	80039c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005338:	480b      	ldr	r0, [pc, #44]	@ (8005368 <prvInitialiseTaskLists+0x74>)
 800533a:	f7fe fb44 	bl	80039c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800533e:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <prvInitialiseTaskLists+0x78>)
 8005340:	4a05      	ldr	r2, [pc, #20]	@ (8005358 <prvInitialiseTaskLists+0x64>)
 8005342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <prvInitialiseTaskLists+0x7c>)
 8005346:	4a05      	ldr	r2, [pc, #20]	@ (800535c <prvInitialiseTaskLists+0x68>)
 8005348:	601a      	str	r2, [r3, #0]
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000f88 	.word	0x20000f88
 8005358:	200013e8 	.word	0x200013e8
 800535c:	200013fc 	.word	0x200013fc
 8005360:	20001418 	.word	0x20001418
 8005364:	2000142c 	.word	0x2000142c
 8005368:	20001444 	.word	0x20001444
 800536c:	20001410 	.word	0x20001410
 8005370:	20001414 	.word	0x20001414

08005374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800537a:	e019      	b.n	80053b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800537c:	f000 fde4 	bl	8005f48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005380:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <prvCheckTasksWaitingTermination+0x50>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fba4 	bl	8003ada <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <prvCheckTasksWaitingTermination+0x54>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3b01      	subs	r3, #1
 8005398:	4a0b      	ldr	r2, [pc, #44]	@ (80053c8 <prvCheckTasksWaitingTermination+0x54>)
 800539a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800539c:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <prvCheckTasksWaitingTermination+0x58>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	4a0a      	ldr	r2, [pc, #40]	@ (80053cc <prvCheckTasksWaitingTermination+0x58>)
 80053a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053a6:	f000 fe01 	bl	8005fac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f810 	bl	80053d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053b0:	4b06      	ldr	r3, [pc, #24]	@ (80053cc <prvCheckTasksWaitingTermination+0x58>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e1      	bne.n	800537c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	2000142c 	.word	0x2000142c
 80053c8:	20001458 	.word	0x20001458
 80053cc:	20001440 	.word	0x20001440

080053d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ff9e 	bl	8006328 <vPortFree>
				vPortFree( pxTCB );
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 ff9b 	bl	8006328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053f2:	e019      	b.n	8005428 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d103      	bne.n	8005406 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 ff92 	bl	8006328 <vPortFree>
	}
 8005404:	e010      	b.n	8005428 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800540c:	2b02      	cmp	r3, #2
 800540e:	d00b      	beq.n	8005428 <prvDeleteTCB+0x58>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <prvDeleteTCB+0x54>
	}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005436:	4b0c      	ldr	r3, [pc, #48]	@ (8005468 <prvResetNextTaskUnblockTime+0x38>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005440:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <prvResetNextTaskUnblockTime+0x3c>)
 8005442:	f04f 32ff 	mov.w	r2, #4294967295
 8005446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005448:	e008      	b.n	800545c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <prvResetNextTaskUnblockTime+0x38>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a04      	ldr	r2, [pc, #16]	@ (800546c <prvResetNextTaskUnblockTime+0x3c>)
 800545a:	6013      	str	r3, [r2, #0]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	20001410 	.word	0x20001410
 800546c:	20001478 	.word	0x20001478

08005470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <xTaskGetSchedulerState+0x34>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800547e:	2301      	movs	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	e008      	b.n	8005496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005484:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <xTaskGetSchedulerState+0x38>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800548c:	2302      	movs	r3, #2
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	e001      	b.n	8005496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005496:	687b      	ldr	r3, [r7, #4]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20001464 	.word	0x20001464
 80054a8:	20001480 	.word	0x20001480

080054ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d058      	beq.n	8005574 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005580 <xTaskPriorityDisinherit+0xd4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d00b      	beq.n	80054e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60fb      	str	r3, [r7, #12]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	60bb      	str	r3, [r7, #8]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005516:	429a      	cmp	r2, r3
 8005518:	d02c      	beq.n	8005574 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551e:	2b00      	cmp	r3, #0
 8005520:	d128      	bne.n	8005574 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fad7 	bl	8003ada <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005544:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <xTaskPriorityDisinherit+0xd8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d903      	bls.n	8005554 <xTaskPriorityDisinherit+0xa8>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	4a0c      	ldr	r2, [pc, #48]	@ (8005584 <xTaskPriorityDisinherit+0xd8>)
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a09      	ldr	r2, [pc, #36]	@ (8005588 <xTaskPriorityDisinherit+0xdc>)
 8005562:	441a      	add	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7fe fa58 	bl	8003a20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005570:	2301      	movs	r3, #1
 8005572:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005574:	697b      	ldr	r3, [r7, #20]
	}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000f84 	.word	0x20000f84
 8005584:	20001460 	.word	0x20001460
 8005588:	20000f88 	.word	0x20000f88

0800558c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005596:	4b21      	ldr	r3, [pc, #132]	@ (800561c <prvAddCurrentTaskToDelayedList+0x90>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800559c:	4b20      	ldr	r3, [pc, #128]	@ (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fa99 	bl	8003ada <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d10a      	bne.n	80055c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4819      	ldr	r0, [pc, #100]	@ (8005624 <prvAddCurrentTaskToDelayedList+0x98>)
 80055c0:	f7fe fa2e 	bl	8003a20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c4:	e026      	b.n	8005614 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ce:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d209      	bcs.n	80055f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055de:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe fa3c 	bl	8003a68 <vListInsert>
}
 80055f0:	e010      	b.n	8005614 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f2:	4b0e      	ldr	r3, [pc, #56]	@ (800562c <prvAddCurrentTaskToDelayedList+0xa0>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <prvAddCurrentTaskToDelayedList+0x94>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7fe fa32 	bl	8003a68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005604:	4b0a      	ldr	r3, [pc, #40]	@ (8005630 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	d202      	bcs.n	8005614 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800560e:	4a08      	ldr	r2, [pc, #32]	@ (8005630 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6013      	str	r3, [r2, #0]
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	2000145c 	.word	0x2000145c
 8005620:	20000f84 	.word	0x20000f84
 8005624:	20001444 	.word	0x20001444
 8005628:	20001414 	.word	0x20001414
 800562c:	20001410 	.word	0x20001410
 8005630:	20001478 	.word	0x20001478

08005634 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	@ 0x28
 8005638:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800563e:	f000 fb13 	bl	8005c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005642:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <xTimerCreateTimerTask+0x84>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d021      	beq.n	800568e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005652:	1d3a      	adds	r2, r7, #4
 8005654:	f107 0108 	add.w	r1, r7, #8
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	4618      	mov	r0, r3
 800565e:	f7fb fb9f 	bl	8000da0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	9202      	str	r2, [sp, #8]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	2302      	movs	r3, #2
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2300      	movs	r3, #0
 8005672:	460a      	mov	r2, r1
 8005674:	4911      	ldr	r1, [pc, #68]	@ (80056bc <xTimerCreateTimerTask+0x88>)
 8005676:	4812      	ldr	r0, [pc, #72]	@ (80056c0 <xTimerCreateTimerTask+0x8c>)
 8005678:	f7fe ff54 	bl	8004524 <xTaskCreateStatic>
 800567c:	4603      	mov	r3, r0
 800567e:	4a11      	ldr	r2, [pc, #68]	@ (80056c4 <xTimerCreateTimerTask+0x90>)
 8005680:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005682:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <xTimerCreateTimerTask+0x90>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800568a:	2301      	movs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	613b      	str	r3, [r7, #16]
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056ac:	697b      	ldr	r3, [r7, #20]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200014b4 	.word	0x200014b4
 80056bc:	08007134 	.word	0x08007134
 80056c0:	08005801 	.word	0x08005801
 80056c4:	200014b8 	.word	0x200014b8

080056c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	@ 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	623b      	str	r3, [r7, #32]
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056f8:	4b19      	ldr	r3, [pc, #100]	@ (8005760 <xTimerGenericCommand+0x98>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02a      	beq.n	8005756 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b05      	cmp	r3, #5
 8005710:	dc18      	bgt.n	8005744 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005712:	f7ff fead 	bl	8005470 <xTaskGetSchedulerState>
 8005716:	4603      	mov	r3, r0
 8005718:	2b02      	cmp	r3, #2
 800571a:	d109      	bne.n	8005730 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800571c:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <xTimerGenericCommand+0x98>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	f107 0110 	add.w	r1, r7, #16
 8005724:	2300      	movs	r3, #0
 8005726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005728:	f7fe fb0c 	bl	8003d44 <xQueueGenericSend>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24
 800572e:	e012      	b.n	8005756 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005730:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <xTimerGenericCommand+0x98>)
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	f107 0110 	add.w	r1, r7, #16
 8005738:	2300      	movs	r3, #0
 800573a:	2200      	movs	r2, #0
 800573c:	f7fe fb02 	bl	8003d44 <xQueueGenericSend>
 8005740:	6278      	str	r0, [r7, #36]	@ 0x24
 8005742:	e008      	b.n	8005756 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005744:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <xTimerGenericCommand+0x98>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	f107 0110 	add.w	r1, r7, #16
 800574c:	2300      	movs	r3, #0
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	f7fe fbfa 	bl	8003f48 <xQueueGenericSendFromISR>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005758:	4618      	mov	r0, r3
 800575a:	3728      	adds	r7, #40	@ 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200014b4 	.word	0x200014b4

08005764 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576e:	4b23      	ldr	r3, [pc, #140]	@ (80057fc <prvProcessExpiredTimer+0x98>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe f9ac 	bl	8003ada <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	18d1      	adds	r1, r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	6978      	ldr	r0, [r7, #20]
 800579e:	f000 f8d5 	bl	800594c <prvInsertTimerInActiveList>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057a8:	2300      	movs	r3, #0
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2300      	movs	r3, #0
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	2100      	movs	r1, #0
 80057b2:	6978      	ldr	r0, [r7, #20]
 80057b4:	f7ff ff88 	bl	80056c8 <xTimerGenericCommand>
 80057b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d114      	bne.n	80057ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60fb      	str	r3, [r7, #12]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	4798      	blx	r3
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200014ac 	.word	0x200014ac

08005800 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	4618      	mov	r0, r3
 800580e:	f000 f859 	bl	80058c4 <prvGetNextExpireTime>
 8005812:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4619      	mov	r1, r3
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f805 	bl	8005828 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800581e:	f000 f8d7 	bl	80059d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005822:	bf00      	nop
 8005824:	e7f0      	b.n	8005808 <prvTimerTask+0x8>
	...

08005828 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005832:	f7ff fa37 	bl	8004ca4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f866 	bl	800590c <prvSampleTimeNow>
 8005840:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d130      	bne.n	80058aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <prvProcessTimerOrBlockTask+0x3c>
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	429a      	cmp	r2, r3
 8005854:	d806      	bhi.n	8005864 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005856:	f7ff fa33 	bl	8004cc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff81 	bl	8005764 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005862:	e024      	b.n	80058ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800586a:	4b13      	ldr	r3, [pc, #76]	@ (80058b8 <prvProcessTimerOrBlockTask+0x90>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <prvProcessTimerOrBlockTask+0x50>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <prvProcessTimerOrBlockTask+0x52>
 8005878:	2300      	movs	r3, #0
 800587a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800587c:	4b0f      	ldr	r3, [pc, #60]	@ (80058bc <prvProcessTimerOrBlockTask+0x94>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	4619      	mov	r1, r3
 800588a:	f7fe fe17 	bl	80044bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800588e:	f7ff fa17 	bl	8004cc0 <xTaskResumeAll>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005898:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <prvProcessTimerOrBlockTask+0x98>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
}
 80058a8:	e001      	b.n	80058ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058aa:	f7ff fa09 	bl	8004cc0 <xTaskResumeAll>
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	200014b0 	.word	0x200014b0
 80058bc:	200014b4 	.word	0x200014b4
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <prvGetNextExpireTime+0x44>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <prvGetNextExpireTime+0x16>
 80058d6:	2201      	movs	r2, #1
 80058d8:	e000      	b.n	80058dc <prvGetNextExpireTime+0x18>
 80058da:	2200      	movs	r2, #0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e8:	4b07      	ldr	r3, [pc, #28]	@ (8005908 <prvGetNextExpireTime+0x44>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e001      	b.n	80058f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058f8:	68fb      	ldr	r3, [r7, #12]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	200014ac 	.word	0x200014ac

0800590c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005914:	f7ff fa72 	bl	8004dfc <xTaskGetTickCount>
 8005918:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800591a:	4b0b      	ldr	r3, [pc, #44]	@ (8005948 <prvSampleTimeNow+0x3c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	429a      	cmp	r2, r3
 8005922:	d205      	bcs.n	8005930 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005924:	f000 f93a 	bl	8005b9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e002      	b.n	8005936 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005936:	4a04      	ldr	r2, [pc, #16]	@ (8005948 <prvSampleTimeNow+0x3c>)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200014bc 	.word	0x200014bc

0800594c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d812      	bhi.n	8005998 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e01b      	b.n	80059be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005986:	4b10      	ldr	r3, [pc, #64]	@ (80059c8 <prvInsertTimerInActiveList+0x7c>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe f869 	bl	8003a68 <vListInsert>
 8005996:	e012      	b.n	80059be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d206      	bcs.n	80059ae <prvInsertTimerInActiveList+0x62>
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e007      	b.n	80059be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <prvInsertTimerInActiveList+0x80>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7fe f855 	bl	8003a68 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059be:	697b      	ldr	r3, [r7, #20]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200014b0 	.word	0x200014b0
 80059cc:	200014ac 	.word	0x200014ac

080059d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08e      	sub	sp, #56	@ 0x38
 80059d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059d6:	e0ce      	b.n	8005b76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da19      	bge.n	8005a12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	3304      	adds	r3, #4
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	61fb      	str	r3, [r7, #28]
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a08:	6850      	ldr	r0, [r2, #4]
 8005a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0c:	6892      	ldr	r2, [r2, #8]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f2c0 80ae 	blt.w	8005b76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe f855 	bl	8003ada <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a30:	463b      	mov	r3, r7
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff ff6a 	bl	800590c <prvSampleTimeNow>
 8005a38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b09      	cmp	r3, #9
 8005a3e:	f200 8097 	bhi.w	8005b70 <prvProcessReceivedCommands+0x1a0>
 8005a42:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <prvProcessReceivedCommands+0x78>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a71 	.word	0x08005a71
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a71 	.word	0x08005a71
 8005a54:	08005ae7 	.word	0x08005ae7
 8005a58:	08005afb 	.word	0x08005afb
 8005a5c:	08005b47 	.word	0x08005b47
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a71 	.word	0x08005a71
 8005a68:	08005ae7 	.word	0x08005ae7
 8005a6c:	08005afb 	.word	0x08005afb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	18d1      	adds	r1, r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a90:	f7ff ff5c 	bl	800594c <prvInsertTimerInActiveList>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d06c      	beq.n	8005b74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d061      	beq.n	8005b74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	441a      	add	r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2300      	movs	r3, #0
 8005abe:	2100      	movs	r1, #0
 8005ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac2:	f7ff fe01 	bl	80056c8 <xTimerGenericCommand>
 8005ac6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d152      	bne.n	8005b74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	61bb      	str	r3, [r7, #24]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005af8:	e03d      	b.n	8005b76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	617b      	str	r3, [r7, #20]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	18d1      	adds	r1, r2, r3
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b40:	f7ff ff04 	bl	800594c <prvInsertTimerInActiveList>
					break;
 8005b44:	e017      	b.n	8005b76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b56:	f000 fbe7 	bl	8006328 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b5a:	e00c      	b.n	8005b76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b6e:	e002      	b.n	8005b76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b70:	bf00      	nop
 8005b72:	e000      	b.n	8005b76 <prvProcessReceivedCommands+0x1a6>
					break;
 8005b74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b76:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <prvProcessReceivedCommands+0x1c8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1d39      	adds	r1, r7, #4
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fa80 	bl	8004084 <xQueueReceive>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f47f af26 	bne.w	80059d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	3730      	adds	r7, #48	@ 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200014b4 	.word	0x200014b4

08005b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ba2:	e049      	b.n	8005c38 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c60 <prvSwitchTimerLists+0xc4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bae:	4b2c      	ldr	r3, [pc, #176]	@ (8005c60 <prvSwitchTimerLists+0xc4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fd ff8c 	bl	8003ada <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02f      	beq.n	8005c38 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d90e      	bls.n	8005c08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <prvSwitchTimerLists+0xc4>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fd ff31 	bl	8003a68 <vListInsert>
 8005c06:	e017      	b.n	8005c38 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	2100      	movs	r1, #0
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fd58 	bl	80056c8 <xTimerGenericCommand>
 8005c18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	603b      	str	r3, [r7, #0]
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c38:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <prvSwitchTimerLists+0xc4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1b0      	bne.n	8005ba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c42:	4b07      	ldr	r3, [pc, #28]	@ (8005c60 <prvSwitchTimerLists+0xc4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <prvSwitchTimerLists+0xc8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <prvSwitchTimerLists+0xc4>)
 8005c4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c50:	4a04      	ldr	r2, [pc, #16]	@ (8005c64 <prvSwitchTimerLists+0xc8>)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6013      	str	r3, [r2, #0]
}
 8005c56:	bf00      	nop
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200014ac 	.word	0x200014ac
 8005c64:	200014b0 	.word	0x200014b0

08005c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c6e:	f000 f96b 	bl	8005f48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c72:	4b15      	ldr	r3, [pc, #84]	@ (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d120      	bne.n	8005cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c7a:	4814      	ldr	r0, [pc, #80]	@ (8005ccc <prvCheckForValidListAndQueue+0x64>)
 8005c7c:	f7fd fea3 	bl	80039c6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c80:	4813      	ldr	r0, [pc, #76]	@ (8005cd0 <prvCheckForValidListAndQueue+0x68>)
 8005c82:	f7fd fea0 	bl	80039c6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c86:	4b13      	ldr	r3, [pc, #76]	@ (8005cd4 <prvCheckForValidListAndQueue+0x6c>)
 8005c88:	4a10      	ldr	r2, [pc, #64]	@ (8005ccc <prvCheckForValidListAndQueue+0x64>)
 8005c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c8c:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <prvCheckForValidListAndQueue+0x70>)
 8005c8e:	4a10      	ldr	r2, [pc, #64]	@ (8005cd0 <prvCheckForValidListAndQueue+0x68>)
 8005c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c92:	2300      	movs	r3, #0
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4b11      	ldr	r3, [pc, #68]	@ (8005cdc <prvCheckForValidListAndQueue+0x74>)
 8005c98:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <prvCheckForValidListAndQueue+0x78>)
 8005c9a:	2110      	movs	r1, #16
 8005c9c:	200a      	movs	r0, #10
 8005c9e:	f7fd ffb1 	bl	8003c04 <xQueueGenericCreateStatic>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4a08      	ldr	r2, [pc, #32]	@ (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005ca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ca8:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cb0:	4b05      	ldr	r3, [pc, #20]	@ (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	490b      	ldr	r1, [pc, #44]	@ (8005ce4 <prvCheckForValidListAndQueue+0x7c>)
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fbd6 	bl	8004468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cbc:	f000 f976 	bl	8005fac <vPortExitCritical>
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200014b4 	.word	0x200014b4
 8005ccc:	20001484 	.word	0x20001484
 8005cd0:	20001498 	.word	0x20001498
 8005cd4:	200014ac 	.word	0x200014ac
 8005cd8:	200014b0 	.word	0x200014b0
 8005cdc:	20001560 	.word	0x20001560
 8005ce0:	200014c0 	.word	0x200014c0
 8005ce4:	0800713c 	.word	0x0800713c

08005ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3b04      	subs	r3, #4
 8005d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f023 0201 	bic.w	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b04      	subs	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d18:	4a0c      	ldr	r2, [pc, #48]	@ (8005d4c <pxPortInitialiseStack+0x64>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3b14      	subs	r3, #20
 8005d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f06f 0202 	mvn.w	r2, #2
 8005d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3b20      	subs	r3, #32
 8005d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	08005d51 	.word	0x08005d51

08005d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d5a:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <prvTaskExitError+0x58>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d00b      	beq.n	8005d7c <prvTaskExitError+0x2c>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	e7fd      	b.n	8005d78 <prvTaskExitError+0x28>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60bb      	str	r3, [r7, #8]
}
 8005d8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d90:	bf00      	nop
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0fc      	beq.n	8005d92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	2000000c 	.word	0x2000000c
 8005dac:	00000000 	.word	0x00000000

08005db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005db0:	4b07      	ldr	r3, [pc, #28]	@ (8005dd0 <pxCurrentTCBConst2>)
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6808      	ldr	r0, [r1, #0]
 8005db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	f380 8809 	msr	PSP, r0
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8811 	msr	BASEPRI, r0
 8005dca:	4770      	bx	lr
 8005dcc:	f3af 8000 	nop.w

08005dd0 <pxCurrentTCBConst2>:
 8005dd0:	20000f84 	.word	0x20000f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005dd8:	4808      	ldr	r0, [pc, #32]	@ (8005dfc <prvPortStartFirstTask+0x24>)
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f380 8808 	msr	MSP, r0
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f380 8814 	msr	CONTROL, r0
 8005dea:	b662      	cpsie	i
 8005dec:	b661      	cpsie	f
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	df00      	svc	0
 8005df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dfa:	bf00      	nop
 8005dfc:	e000ed08 	.word	0xe000ed08

08005e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e06:	4b47      	ldr	r3, [pc, #284]	@ (8005f24 <xPortStartScheduler+0x124>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a47      	ldr	r2, [pc, #284]	@ (8005f28 <xPortStartScheduler+0x128>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10b      	bne.n	8005e28 <xPortStartScheduler+0x28>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e28:	4b3e      	ldr	r3, [pc, #248]	@ (8005f24 <xPortStartScheduler+0x124>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f2c <xPortStartScheduler+0x12c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10b      	bne.n	8005e4a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	613b      	str	r3, [r7, #16]
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e4a:	4b39      	ldr	r3, [pc, #228]	@ (8005f30 <xPortStartScheduler+0x130>)
 8005e4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	22ff      	movs	r2, #255	@ 0xff
 8005e5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <xPortStartScheduler+0x134>)
 8005e70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e72:	4b31      	ldr	r3, [pc, #196]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e74:	2207      	movs	r2, #7
 8005e76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e78:	e009      	b.n	8005e8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	d0ef      	beq.n	8005e7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e9a:	4b27      	ldr	r3, [pc, #156]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1c3 0307 	rsb	r3, r3, #7
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d00b      	beq.n	8005ebe <xPortStartScheduler+0xbe>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60bb      	str	r3, [r7, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005ec6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ed0:	4a19      	ldr	r2, [pc, #100]	@ (8005f38 <xPortStartScheduler+0x138>)
 8005ed2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005edc:	4b17      	ldr	r3, [pc, #92]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005ee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ee8:	4b14      	ldr	r3, [pc, #80]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a13      	ldr	r2, [pc, #76]	@ (8005f3c <xPortStartScheduler+0x13c>)
 8005eee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ef2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ef4:	f000 f8da 	bl	80060ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ef8:	4b11      	ldr	r3, [pc, #68]	@ (8005f40 <xPortStartScheduler+0x140>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005efe:	f000 f8f9 	bl	80060f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <xPortStartScheduler+0x144>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a0f      	ldr	r2, [pc, #60]	@ (8005f44 <xPortStartScheduler+0x144>)
 8005f08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f0e:	f7ff ff63 	bl	8005dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f12:	f7ff f83d 	bl	8004f90 <vTaskSwitchContext>
	prvTaskExitError();
 8005f16:	f7ff ff1b 	bl	8005d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	e000ed00 	.word	0xe000ed00
 8005f28:	410fc271 	.word	0x410fc271
 8005f2c:	410fc270 	.word	0x410fc270
 8005f30:	e000e400 	.word	0xe000e400
 8005f34:	200015b0 	.word	0x200015b0
 8005f38:	200015b4 	.word	0x200015b4
 8005f3c:	e000ed20 	.word	0xe000ed20
 8005f40:	2000000c 	.word	0x2000000c
 8005f44:	e000ef34 	.word	0xe000ef34

08005f48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <vPortEnterCritical+0x5c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa4 <vPortEnterCritical+0x5c>)
 8005f6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <vPortEnterCritical+0x5c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d110      	bne.n	8005f96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <vPortEnterCritical+0x60>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	603b      	str	r3, [r7, #0]
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	e7fd      	b.n	8005f92 <vPortEnterCritical+0x4a>
	}
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000000c 	.word	0x2000000c
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fb2:	4b12      	ldr	r3, [pc, #72]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <vPortExitCritical+0x26>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	607b      	str	r3, [r7, #4]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	4a08      	ldr	r2, [pc, #32]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <vPortExitCritical+0x50>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <vPortExitCritical+0x44>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
}
 8005fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	2000000c 	.word	0x2000000c

08006000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006000:	f3ef 8009 	mrs	r0, PSP
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4b15      	ldr	r3, [pc, #84]	@ (8006060 <pxCurrentTCBConst>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f01e 0f10 	tst.w	lr, #16
 8006010:	bf08      	it	eq
 8006012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	6010      	str	r0, [r2, #0]
 800601c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006024:	f380 8811 	msr	BASEPRI, r0
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f7fe ffae 	bl	8004f90 <vTaskSwitchContext>
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f380 8811 	msr	BASEPRI, r0
 800603c:	bc09      	pop	{r0, r3}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006046:	f01e 0f10 	tst.w	lr, #16
 800604a:	bf08      	it	eq
 800604c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006050:	f380 8809 	msr	PSP, r0
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst>:
 8006060:	20000f84 	.word	0x20000f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop

08006068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
}
 8006080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006082:	f7fe fecb 	bl	8004e1c <xTaskIncrementTick>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800608c:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <xPortSysTickHandler+0x40>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f383 8811 	msr	BASEPRI, r3
}
 800609e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <vPortSetupTimerInterrupt+0x38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	@ (80060e8 <vPortSetupTimerInterrupt+0x3c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0a      	ldr	r2, [pc, #40]	@ (80060ec <vPortSetupTimerInterrupt+0x40>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	4a09      	ldr	r2, [pc, #36]	@ (80060f0 <vPortSetupTimerInterrupt+0x44>)
 80060ca:	3b01      	subs	r3, #1
 80060cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ce:	4b04      	ldr	r3, [pc, #16]	@ (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	e000e010 	.word	0xe000e010
 80060e4:	e000e018 	.word	0xe000e018
 80060e8:	20000000 	.word	0x20000000
 80060ec:	10624dd3 	.word	0x10624dd3
 80060f0:	e000e014 	.word	0xe000e014

080060f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006104 <vPortEnableVFP+0x10>
 80060f8:	6801      	ldr	r1, [r0, #0]
 80060fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060fe:	6001      	str	r1, [r0, #0]
 8006100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006102:	bf00      	nop
 8006104:	e000ed88 	.word	0xe000ed88

08006108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d915      	bls.n	8006146 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800611a:	4a18      	ldr	r2, [pc, #96]	@ (800617c <vPortValidateInterruptPriority+0x74>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006124:	4b16      	ldr	r3, [pc, #88]	@ (8006180 <vPortValidateInterruptPriority+0x78>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	7afa      	ldrb	r2, [r7, #11]
 800612a:	429a      	cmp	r2, r3
 800612c:	d20b      	bcs.n	8006146 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006146:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <vPortValidateInterruptPriority+0x7c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800614e:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <vPortValidateInterruptPriority+0x80>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d90b      	bls.n	800616e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	603b      	str	r3, [r7, #0]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <vPortValidateInterruptPriority+0x62>
	}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	e000e3f0 	.word	0xe000e3f0
 8006180:	200015b0 	.word	0x200015b0
 8006184:	e000ed0c 	.word	0xe000ed0c
 8006188:	200015b4 	.word	0x200015b4

0800618c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	@ 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006198:	f7fe fd84 	bl	8004ca4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800619c:	4b5c      	ldr	r3, [pc, #368]	@ (8006310 <pvPortMalloc+0x184>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a4:	f000 f924 	bl	80063f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006314 <pvPortMalloc+0x188>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 8095 	bne.w	80062e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061bc:	2208      	movs	r2, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4413      	add	r3, r2
 80061c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d015      	beq.n	80061fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	3308      	adds	r3, #8
 80061d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <pvPortMalloc+0x6e>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	617b      	str	r3, [r7, #20]
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	e7fd      	b.n	80061f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d06f      	beq.n	80062e0 <pvPortMalloc+0x154>
 8006200:	4b45      	ldr	r3, [pc, #276]	@ (8006318 <pvPortMalloc+0x18c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d86a      	bhi.n	80062e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800620a:	4b44      	ldr	r3, [pc, #272]	@ (800631c <pvPortMalloc+0x190>)
 800620c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800620e:	4b43      	ldr	r3, [pc, #268]	@ (800631c <pvPortMalloc+0x190>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006214:	e004      	b.n	8006220 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d903      	bls.n	8006232 <pvPortMalloc+0xa6>
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f1      	bne.n	8006216 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006232:	4b37      	ldr	r3, [pc, #220]	@ (8006310 <pvPortMalloc+0x184>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	429a      	cmp	r2, r3
 800623a:	d051      	beq.n	80062e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2208      	movs	r2, #8
 8006242:	4413      	add	r3, r2
 8006244:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	2308      	movs	r3, #8
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	429a      	cmp	r2, r3
 800625c:	d920      	bls.n	80062a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800625e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <pvPortMalloc+0xfc>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	613b      	str	r3, [r7, #16]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800629a:	69b8      	ldr	r0, [r7, #24]
 800629c:	f000 f90a 	bl	80064b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006318 <pvPortMalloc+0x18c>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006318 <pvPortMalloc+0x18c>)
 80062ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <pvPortMalloc+0x18c>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006320 <pvPortMalloc+0x194>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d203      	bcs.n	80062c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062ba:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <pvPortMalloc+0x18c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <pvPortMalloc+0x194>)
 80062c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	4b13      	ldr	r3, [pc, #76]	@ (8006314 <pvPortMalloc+0x188>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062d6:	4b13      	ldr	r3, [pc, #76]	@ (8006324 <pvPortMalloc+0x198>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <pvPortMalloc+0x198>)
 80062de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062e0:	f7fe fcee 	bl	8004cc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <pvPortMalloc+0x17a>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <pvPortMalloc+0x176>
	return pvReturn;
 8006306:	69fb      	ldr	r3, [r7, #28]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	@ 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20002178 	.word	0x20002178
 8006314:	2000218c 	.word	0x2000218c
 8006318:	2000217c 	.word	0x2000217c
 800631c:	20002170 	.word	0x20002170
 8006320:	20002180 	.word	0x20002180
 8006324:	20002184 	.word	0x20002184

08006328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d04f      	beq.n	80063da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800633a:	2308      	movs	r3, #8
 800633c:	425b      	negs	r3, r3
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b25      	ldr	r3, [pc, #148]	@ (80063e4 <vPortFree+0xbc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <vPortFree+0x46>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	60fb      	str	r3, [r7, #12]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <vPortFree+0x66>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60bb      	str	r3, [r7, #8]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <vPortFree+0xbc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01e      	beq.n	80063da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11a      	bne.n	80063da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4b0e      	ldr	r3, [pc, #56]	@ (80063e4 <vPortFree+0xbc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063b4:	f7fe fc76 	bl	8004ca4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <vPortFree+0xc0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4413      	add	r3, r2
 80063c2:	4a09      	ldr	r2, [pc, #36]	@ (80063e8 <vPortFree+0xc0>)
 80063c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063c6:	6938      	ldr	r0, [r7, #16]
 80063c8:	f000 f874 	bl	80064b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <vPortFree+0xc4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	4a06      	ldr	r2, [pc, #24]	@ (80063ec <vPortFree+0xc4>)
 80063d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063d6:	f7fe fc73 	bl	8004cc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	2000218c 	.word	0x2000218c
 80063e8:	2000217c 	.word	0x2000217c
 80063ec:	20002188 	.word	0x20002188

080063f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80063fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063fc:	4b27      	ldr	r3, [pc, #156]	@ (800649c <prvHeapInit+0xac>)
 80063fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3307      	adds	r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <prvHeapInit+0xac>)
 8006420:	4413      	add	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <prvHeapInit+0xb0>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800642e:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <prvHeapInit+0xb0>)
 8006430:	2200      	movs	r2, #0
 8006432:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	4413      	add	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800643c:	2208      	movs	r2, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <prvHeapInit+0xb4>)
 8006450:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006452:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <prvHeapInit+0xb4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800645a:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <prvHeapInit+0xb4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <prvHeapInit+0xb4>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a0a      	ldr	r2, [pc, #40]	@ (80064a8 <prvHeapInit+0xb8>)
 800647e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <prvHeapInit+0xbc>)
 8006486:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006488:	4b09      	ldr	r3, [pc, #36]	@ (80064b0 <prvHeapInit+0xc0>)
 800648a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800648e:	601a      	str	r2, [r3, #0]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	200015b8 	.word	0x200015b8
 80064a0:	20002170 	.word	0x20002170
 80064a4:	20002178 	.word	0x20002178
 80064a8:	20002180 	.word	0x20002180
 80064ac:	2000217c 	.word	0x2000217c
 80064b0:	2000218c 	.word	0x2000218c

080064b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064bc:	4b28      	ldr	r3, [pc, #160]	@ (8006560 <prvInsertBlockIntoFreeList+0xac>)
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e002      	b.n	80064c8 <prvInsertBlockIntoFreeList+0x14>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d8f7      	bhi.n	80064c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d108      	bne.n	80064f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d118      	bne.n	800653c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <prvInsertBlockIntoFreeList+0xb0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d00d      	beq.n	8006532 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	441a      	add	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e008      	b.n	8006544 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <prvInsertBlockIntoFreeList+0xb0>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e003      	b.n	8006544 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	d002      	beq.n	8006552 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20002170 	.word	0x20002170
 8006564:	20002178 	.word	0x20002178

08006568 <std>:
 8006568:	2300      	movs	r3, #0
 800656a:	b510      	push	{r4, lr}
 800656c:	4604      	mov	r4, r0
 800656e:	e9c0 3300 	strd	r3, r3, [r0]
 8006572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006576:	6083      	str	r3, [r0, #8]
 8006578:	8181      	strh	r1, [r0, #12]
 800657a:	6643      	str	r3, [r0, #100]	@ 0x64
 800657c:	81c2      	strh	r2, [r0, #14]
 800657e:	6183      	str	r3, [r0, #24]
 8006580:	4619      	mov	r1, r3
 8006582:	2208      	movs	r2, #8
 8006584:	305c      	adds	r0, #92	@ 0x5c
 8006586:	f000 f9e7 	bl	8006958 <memset>
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <std+0x58>)
 800658c:	6263      	str	r3, [r4, #36]	@ 0x24
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <std+0x5c>)
 8006590:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <std+0x60>)
 8006594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006596:	4b0d      	ldr	r3, [pc, #52]	@ (80065cc <std+0x64>)
 8006598:	6323      	str	r3, [r4, #48]	@ 0x30
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <std+0x68>)
 800659c:	6224      	str	r4, [r4, #32]
 800659e:	429c      	cmp	r4, r3
 80065a0:	d006      	beq.n	80065b0 <std+0x48>
 80065a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065a6:	4294      	cmp	r4, r2
 80065a8:	d002      	beq.n	80065b0 <std+0x48>
 80065aa:	33d0      	adds	r3, #208	@ 0xd0
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d105      	bne.n	80065bc <std+0x54>
 80065b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b8:	f000 ba46 	b.w	8006a48 <__retarget_lock_init_recursive>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	bf00      	nop
 80065c0:	080067a9 	.word	0x080067a9
 80065c4:	080067cb 	.word	0x080067cb
 80065c8:	08006803 	.word	0x08006803
 80065cc:	08006827 	.word	0x08006827
 80065d0:	20002190 	.word	0x20002190

080065d4 <stdio_exit_handler>:
 80065d4:	4a02      	ldr	r2, [pc, #8]	@ (80065e0 <stdio_exit_handler+0xc>)
 80065d6:	4903      	ldr	r1, [pc, #12]	@ (80065e4 <stdio_exit_handler+0x10>)
 80065d8:	4803      	ldr	r0, [pc, #12]	@ (80065e8 <stdio_exit_handler+0x14>)
 80065da:	f000 b869 	b.w	80066b0 <_fwalk_sglue>
 80065de:	bf00      	nop
 80065e0:	20000010 	.word	0x20000010
 80065e4:	08006d65 	.word	0x08006d65
 80065e8:	20000020 	.word	0x20000020

080065ec <cleanup_stdio>:
 80065ec:	6841      	ldr	r1, [r0, #4]
 80065ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <cleanup_stdio+0x34>)
 80065f0:	4299      	cmp	r1, r3
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	d001      	beq.n	80065fc <cleanup_stdio+0x10>
 80065f8:	f000 fbb4 	bl	8006d64 <_fflush_r>
 80065fc:	68a1      	ldr	r1, [r4, #8]
 80065fe:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <cleanup_stdio+0x38>)
 8006600:	4299      	cmp	r1, r3
 8006602:	d002      	beq.n	800660a <cleanup_stdio+0x1e>
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fbad 	bl	8006d64 <_fflush_r>
 800660a:	68e1      	ldr	r1, [r4, #12]
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <cleanup_stdio+0x3c>)
 800660e:	4299      	cmp	r1, r3
 8006610:	d004      	beq.n	800661c <cleanup_stdio+0x30>
 8006612:	4620      	mov	r0, r4
 8006614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006618:	f000 bba4 	b.w	8006d64 <_fflush_r>
 800661c:	bd10      	pop	{r4, pc}
 800661e:	bf00      	nop
 8006620:	20002190 	.word	0x20002190
 8006624:	200021f8 	.word	0x200021f8
 8006628:	20002260 	.word	0x20002260

0800662c <global_stdio_init.part.0>:
 800662c:	b510      	push	{r4, lr}
 800662e:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <global_stdio_init.part.0+0x30>)
 8006630:	4c0b      	ldr	r4, [pc, #44]	@ (8006660 <global_stdio_init.part.0+0x34>)
 8006632:	4a0c      	ldr	r2, [pc, #48]	@ (8006664 <global_stdio_init.part.0+0x38>)
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	4620      	mov	r0, r4
 8006638:	2200      	movs	r2, #0
 800663a:	2104      	movs	r1, #4
 800663c:	f7ff ff94 	bl	8006568 <std>
 8006640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006644:	2201      	movs	r2, #1
 8006646:	2109      	movs	r1, #9
 8006648:	f7ff ff8e 	bl	8006568 <std>
 800664c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006650:	2202      	movs	r2, #2
 8006652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006656:	2112      	movs	r1, #18
 8006658:	f7ff bf86 	b.w	8006568 <std>
 800665c:	200022c8 	.word	0x200022c8
 8006660:	20002190 	.word	0x20002190
 8006664:	080065d5 	.word	0x080065d5

08006668 <__sfp_lock_acquire>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__sfp_lock_acquire+0x8>)
 800666a:	f000 b9ee 	b.w	8006a4a <__retarget_lock_acquire_recursive>
 800666e:	bf00      	nop
 8006670:	200022d1 	.word	0x200022d1

08006674 <__sfp_lock_release>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__sfp_lock_release+0x8>)
 8006676:	f000 b9e9 	b.w	8006a4c <__retarget_lock_release_recursive>
 800667a:	bf00      	nop
 800667c:	200022d1 	.word	0x200022d1

08006680 <__sinit>:
 8006680:	b510      	push	{r4, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	f7ff fff0 	bl	8006668 <__sfp_lock_acquire>
 8006688:	6a23      	ldr	r3, [r4, #32]
 800668a:	b11b      	cbz	r3, 8006694 <__sinit+0x14>
 800668c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006690:	f7ff bff0 	b.w	8006674 <__sfp_lock_release>
 8006694:	4b04      	ldr	r3, [pc, #16]	@ (80066a8 <__sinit+0x28>)
 8006696:	6223      	str	r3, [r4, #32]
 8006698:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <__sinit+0x2c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f5      	bne.n	800668c <__sinit+0xc>
 80066a0:	f7ff ffc4 	bl	800662c <global_stdio_init.part.0>
 80066a4:	e7f2      	b.n	800668c <__sinit+0xc>
 80066a6:	bf00      	nop
 80066a8:	080065ed 	.word	0x080065ed
 80066ac:	200022c8 	.word	0x200022c8

080066b0 <_fwalk_sglue>:
 80066b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b4:	4607      	mov	r7, r0
 80066b6:	4688      	mov	r8, r1
 80066b8:	4614      	mov	r4, r2
 80066ba:	2600      	movs	r6, #0
 80066bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c0:	f1b9 0901 	subs.w	r9, r9, #1
 80066c4:	d505      	bpl.n	80066d2 <_fwalk_sglue+0x22>
 80066c6:	6824      	ldr	r4, [r4, #0]
 80066c8:	2c00      	cmp	r4, #0
 80066ca:	d1f7      	bne.n	80066bc <_fwalk_sglue+0xc>
 80066cc:	4630      	mov	r0, r6
 80066ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d907      	bls.n	80066e8 <_fwalk_sglue+0x38>
 80066d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066dc:	3301      	adds	r3, #1
 80066de:	d003      	beq.n	80066e8 <_fwalk_sglue+0x38>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c0      	blx	r8
 80066e6:	4306      	orrs	r6, r0
 80066e8:	3568      	adds	r5, #104	@ 0x68
 80066ea:	e7e9      	b.n	80066c0 <_fwalk_sglue+0x10>

080066ec <_puts_r>:
 80066ec:	6a03      	ldr	r3, [r0, #32]
 80066ee:	b570      	push	{r4, r5, r6, lr}
 80066f0:	6884      	ldr	r4, [r0, #8]
 80066f2:	4605      	mov	r5, r0
 80066f4:	460e      	mov	r6, r1
 80066f6:	b90b      	cbnz	r3, 80066fc <_puts_r+0x10>
 80066f8:	f7ff ffc2 	bl	8006680 <__sinit>
 80066fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d405      	bmi.n	800670e <_puts_r+0x22>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	0598      	lsls	r0, r3, #22
 8006706:	d402      	bmi.n	800670e <_puts_r+0x22>
 8006708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800670a:	f000 f99e 	bl	8006a4a <__retarget_lock_acquire_recursive>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	0719      	lsls	r1, r3, #28
 8006712:	d502      	bpl.n	800671a <_puts_r+0x2e>
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d135      	bne.n	8006786 <_puts_r+0x9a>
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f000 f8c5 	bl	80068ac <__swsetup_r>
 8006722:	b380      	cbz	r0, 8006786 <_puts_r+0x9a>
 8006724:	f04f 35ff 	mov.w	r5, #4294967295
 8006728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800672a:	07da      	lsls	r2, r3, #31
 800672c:	d405      	bmi.n	800673a <_puts_r+0x4e>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	059b      	lsls	r3, r3, #22
 8006732:	d402      	bmi.n	800673a <_puts_r+0x4e>
 8006734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006736:	f000 f989 	bl	8006a4c <__retarget_lock_release_recursive>
 800673a:	4628      	mov	r0, r5
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	2b00      	cmp	r3, #0
 8006740:	da04      	bge.n	800674c <_puts_r+0x60>
 8006742:	69a2      	ldr	r2, [r4, #24]
 8006744:	429a      	cmp	r2, r3
 8006746:	dc17      	bgt.n	8006778 <_puts_r+0x8c>
 8006748:	290a      	cmp	r1, #10
 800674a:	d015      	beq.n	8006778 <_puts_r+0x8c>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	7019      	strb	r1, [r3, #0]
 8006754:	68a3      	ldr	r3, [r4, #8]
 8006756:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800675a:	3b01      	subs	r3, #1
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	2900      	cmp	r1, #0
 8006760:	d1ed      	bne.n	800673e <_puts_r+0x52>
 8006762:	2b00      	cmp	r3, #0
 8006764:	da11      	bge.n	800678a <_puts_r+0x9e>
 8006766:	4622      	mov	r2, r4
 8006768:	210a      	movs	r1, #10
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f85f 	bl	800682e <__swbuf_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d0d7      	beq.n	8006724 <_puts_r+0x38>
 8006774:	250a      	movs	r5, #10
 8006776:	e7d7      	b.n	8006728 <_puts_r+0x3c>
 8006778:	4622      	mov	r2, r4
 800677a:	4628      	mov	r0, r5
 800677c:	f000 f857 	bl	800682e <__swbuf_r>
 8006780:	3001      	adds	r0, #1
 8006782:	d1e7      	bne.n	8006754 <_puts_r+0x68>
 8006784:	e7ce      	b.n	8006724 <_puts_r+0x38>
 8006786:	3e01      	subs	r6, #1
 8006788:	e7e4      	b.n	8006754 <_puts_r+0x68>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	6022      	str	r2, [r4, #0]
 8006790:	220a      	movs	r2, #10
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e7ee      	b.n	8006774 <_puts_r+0x88>
	...

08006798 <puts>:
 8006798:	4b02      	ldr	r3, [pc, #8]	@ (80067a4 <puts+0xc>)
 800679a:	4601      	mov	r1, r0
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	f7ff bfa5 	b.w	80066ec <_puts_r>
 80067a2:	bf00      	nop
 80067a4:	2000001c 	.word	0x2000001c

080067a8 <__sread>:
 80067a8:	b510      	push	{r4, lr}
 80067aa:	460c      	mov	r4, r1
 80067ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b0:	f000 f8fc 	bl	80069ac <_read_r>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	bfab      	itete	ge
 80067b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ba:	89a3      	ldrhlt	r3, [r4, #12]
 80067bc:	181b      	addge	r3, r3, r0
 80067be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067c2:	bfac      	ite	ge
 80067c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067c6:	81a3      	strhlt	r3, [r4, #12]
 80067c8:	bd10      	pop	{r4, pc}

080067ca <__swrite>:
 80067ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ce:	461f      	mov	r7, r3
 80067d0:	898b      	ldrh	r3, [r1, #12]
 80067d2:	05db      	lsls	r3, r3, #23
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	4616      	mov	r6, r2
 80067da:	d505      	bpl.n	80067e8 <__swrite+0x1e>
 80067dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e0:	2302      	movs	r3, #2
 80067e2:	2200      	movs	r2, #0
 80067e4:	f000 f8d0 	bl	8006988 <_lseek_r>
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	4632      	mov	r2, r6
 80067f6:	463b      	mov	r3, r7
 80067f8:	4628      	mov	r0, r5
 80067fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067fe:	f000 b8e7 	b.w	80069d0 <_write_r>

08006802 <__sseek>:
 8006802:	b510      	push	{r4, lr}
 8006804:	460c      	mov	r4, r1
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 f8bd 	bl	8006988 <_lseek_r>
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	bf15      	itete	ne
 8006814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800681a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800681e:	81a3      	strheq	r3, [r4, #12]
 8006820:	bf18      	it	ne
 8006822:	81a3      	strhne	r3, [r4, #12]
 8006824:	bd10      	pop	{r4, pc}

08006826 <__sclose>:
 8006826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682a:	f000 b89d 	b.w	8006968 <_close_r>

0800682e <__swbuf_r>:
 800682e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006830:	460e      	mov	r6, r1
 8006832:	4614      	mov	r4, r2
 8006834:	4605      	mov	r5, r0
 8006836:	b118      	cbz	r0, 8006840 <__swbuf_r+0x12>
 8006838:	6a03      	ldr	r3, [r0, #32]
 800683a:	b90b      	cbnz	r3, 8006840 <__swbuf_r+0x12>
 800683c:	f7ff ff20 	bl	8006680 <__sinit>
 8006840:	69a3      	ldr	r3, [r4, #24]
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	071a      	lsls	r2, r3, #28
 8006848:	d501      	bpl.n	800684e <__swbuf_r+0x20>
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	b943      	cbnz	r3, 8006860 <__swbuf_r+0x32>
 800684e:	4621      	mov	r1, r4
 8006850:	4628      	mov	r0, r5
 8006852:	f000 f82b 	bl	80068ac <__swsetup_r>
 8006856:	b118      	cbz	r0, 8006860 <__swbuf_r+0x32>
 8006858:	f04f 37ff 	mov.w	r7, #4294967295
 800685c:	4638      	mov	r0, r7
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	6922      	ldr	r2, [r4, #16]
 8006864:	1a98      	subs	r0, r3, r2
 8006866:	6963      	ldr	r3, [r4, #20]
 8006868:	b2f6      	uxtb	r6, r6
 800686a:	4283      	cmp	r3, r0
 800686c:	4637      	mov	r7, r6
 800686e:	dc05      	bgt.n	800687c <__swbuf_r+0x4e>
 8006870:	4621      	mov	r1, r4
 8006872:	4628      	mov	r0, r5
 8006874:	f000 fa76 	bl	8006d64 <_fflush_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	d1ed      	bne.n	8006858 <__swbuf_r+0x2a>
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	3b01      	subs	r3, #1
 8006880:	60a3      	str	r3, [r4, #8]
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	701e      	strb	r6, [r3, #0]
 800688a:	6962      	ldr	r2, [r4, #20]
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	429a      	cmp	r2, r3
 8006890:	d004      	beq.n	800689c <__swbuf_r+0x6e>
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	07db      	lsls	r3, r3, #31
 8006896:	d5e1      	bpl.n	800685c <__swbuf_r+0x2e>
 8006898:	2e0a      	cmp	r6, #10
 800689a:	d1df      	bne.n	800685c <__swbuf_r+0x2e>
 800689c:	4621      	mov	r1, r4
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 fa60 	bl	8006d64 <_fflush_r>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d0d9      	beq.n	800685c <__swbuf_r+0x2e>
 80068a8:	e7d6      	b.n	8006858 <__swbuf_r+0x2a>
	...

080068ac <__swsetup_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4b29      	ldr	r3, [pc, #164]	@ (8006954 <__swsetup_r+0xa8>)
 80068b0:	4605      	mov	r5, r0
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	460c      	mov	r4, r1
 80068b6:	b118      	cbz	r0, 80068c0 <__swsetup_r+0x14>
 80068b8:	6a03      	ldr	r3, [r0, #32]
 80068ba:	b90b      	cbnz	r3, 80068c0 <__swsetup_r+0x14>
 80068bc:	f7ff fee0 	bl	8006680 <__sinit>
 80068c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c4:	0719      	lsls	r1, r3, #28
 80068c6:	d422      	bmi.n	800690e <__swsetup_r+0x62>
 80068c8:	06da      	lsls	r2, r3, #27
 80068ca:	d407      	bmi.n	80068dc <__swsetup_r+0x30>
 80068cc:	2209      	movs	r2, #9
 80068ce:	602a      	str	r2, [r5, #0]
 80068d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295
 80068da:	e033      	b.n	8006944 <__swsetup_r+0x98>
 80068dc:	0758      	lsls	r0, r3, #29
 80068de:	d512      	bpl.n	8006906 <__swsetup_r+0x5a>
 80068e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068e2:	b141      	cbz	r1, 80068f6 <__swsetup_r+0x4a>
 80068e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068e8:	4299      	cmp	r1, r3
 80068ea:	d002      	beq.n	80068f2 <__swsetup_r+0x46>
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f8bd 	bl	8006a6c <_free_r>
 80068f2:	2300      	movs	r3, #0
 80068f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068fc:	81a3      	strh	r3, [r4, #12]
 80068fe:	2300      	movs	r3, #0
 8006900:	6063      	str	r3, [r4, #4]
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f043 0308 	orr.w	r3, r3, #8
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	b94b      	cbnz	r3, 8006926 <__swsetup_r+0x7a>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691c:	d003      	beq.n	8006926 <__swsetup_r+0x7a>
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	f000 fa6d 	bl	8006e00 <__smakebuf_r>
 8006926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692a:	f013 0201 	ands.w	r2, r3, #1
 800692e:	d00a      	beq.n	8006946 <__swsetup_r+0x9a>
 8006930:	2200      	movs	r2, #0
 8006932:	60a2      	str	r2, [r4, #8]
 8006934:	6962      	ldr	r2, [r4, #20]
 8006936:	4252      	negs	r2, r2
 8006938:	61a2      	str	r2, [r4, #24]
 800693a:	6922      	ldr	r2, [r4, #16]
 800693c:	b942      	cbnz	r2, 8006950 <__swsetup_r+0xa4>
 800693e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006942:	d1c5      	bne.n	80068d0 <__swsetup_r+0x24>
 8006944:	bd38      	pop	{r3, r4, r5, pc}
 8006946:	0799      	lsls	r1, r3, #30
 8006948:	bf58      	it	pl
 800694a:	6962      	ldrpl	r2, [r4, #20]
 800694c:	60a2      	str	r2, [r4, #8]
 800694e:	e7f4      	b.n	800693a <__swsetup_r+0x8e>
 8006950:	2000      	movs	r0, #0
 8006952:	e7f7      	b.n	8006944 <__swsetup_r+0x98>
 8006954:	2000001c 	.word	0x2000001c

08006958 <memset>:
 8006958:	4402      	add	r2, r0
 800695a:	4603      	mov	r3, r0
 800695c:	4293      	cmp	r3, r2
 800695e:	d100      	bne.n	8006962 <memset+0xa>
 8006960:	4770      	bx	lr
 8006962:	f803 1b01 	strb.w	r1, [r3], #1
 8006966:	e7f9      	b.n	800695c <memset+0x4>

08006968 <_close_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4d06      	ldr	r5, [pc, #24]	@ (8006984 <_close_r+0x1c>)
 800696c:	2300      	movs	r3, #0
 800696e:	4604      	mov	r4, r0
 8006970:	4608      	mov	r0, r1
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	f7f9 ffc1 	bl	80008fa <_close>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d102      	bne.n	8006982 <_close_r+0x1a>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	b103      	cbz	r3, 8006982 <_close_r+0x1a>
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	200022cc 	.word	0x200022cc

08006988 <_lseek_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d07      	ldr	r5, [pc, #28]	@ (80069a8 <_lseek_r+0x20>)
 800698c:	4604      	mov	r4, r0
 800698e:	4608      	mov	r0, r1
 8006990:	4611      	mov	r1, r2
 8006992:	2200      	movs	r2, #0
 8006994:	602a      	str	r2, [r5, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	f7f9 ffd6 	bl	8000948 <_lseek>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_lseek_r+0x1e>
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_lseek_r+0x1e>
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	200022cc 	.word	0x200022cc

080069ac <_read_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4d07      	ldr	r5, [pc, #28]	@ (80069cc <_read_r+0x20>)
 80069b0:	4604      	mov	r4, r0
 80069b2:	4608      	mov	r0, r1
 80069b4:	4611      	mov	r1, r2
 80069b6:	2200      	movs	r2, #0
 80069b8:	602a      	str	r2, [r5, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f7f9 ff64 	bl	8000888 <_read>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_read_r+0x1e>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_read_r+0x1e>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	200022cc 	.word	0x200022cc

080069d0 <_write_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d07      	ldr	r5, [pc, #28]	@ (80069f0 <_write_r+0x20>)
 80069d4:	4604      	mov	r4, r0
 80069d6:	4608      	mov	r0, r1
 80069d8:	4611      	mov	r1, r2
 80069da:	2200      	movs	r2, #0
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7f9 ff6f 	bl	80008c2 <_write>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_write_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_write_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	200022cc 	.word	0x200022cc

080069f4 <__errno>:
 80069f4:	4b01      	ldr	r3, [pc, #4]	@ (80069fc <__errno+0x8>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	2000001c 	.word	0x2000001c

08006a00 <__libc_init_array>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4d0d      	ldr	r5, [pc, #52]	@ (8006a38 <__libc_init_array+0x38>)
 8006a04:	4c0d      	ldr	r4, [pc, #52]	@ (8006a3c <__libc_init_array+0x3c>)
 8006a06:	1b64      	subs	r4, r4, r5
 8006a08:	10a4      	asrs	r4, r4, #2
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	d109      	bne.n	8006a24 <__libc_init_array+0x24>
 8006a10:	4d0b      	ldr	r5, [pc, #44]	@ (8006a40 <__libc_init_array+0x40>)
 8006a12:	4c0c      	ldr	r4, [pc, #48]	@ (8006a44 <__libc_init_array+0x44>)
 8006a14:	f000 fa62 	bl	8006edc <_init>
 8006a18:	1b64      	subs	r4, r4, r5
 8006a1a:	10a4      	asrs	r4, r4, #2
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	42a6      	cmp	r6, r4
 8006a20:	d105      	bne.n	8006a2e <__libc_init_array+0x2e>
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a28:	4798      	blx	r3
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	e7ee      	b.n	8006a0c <__libc_init_array+0xc>
 8006a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a32:	4798      	blx	r3
 8006a34:	3601      	adds	r6, #1
 8006a36:	e7f2      	b.n	8006a1e <__libc_init_array+0x1e>
 8006a38:	080071b8 	.word	0x080071b8
 8006a3c:	080071b8 	.word	0x080071b8
 8006a40:	080071b8 	.word	0x080071b8
 8006a44:	080071bc 	.word	0x080071bc

08006a48 <__retarget_lock_init_recursive>:
 8006a48:	4770      	bx	lr

08006a4a <__retarget_lock_acquire_recursive>:
 8006a4a:	4770      	bx	lr

08006a4c <__retarget_lock_release_recursive>:
 8006a4c:	4770      	bx	lr

08006a4e <memcpy>:
 8006a4e:	440a      	add	r2, r1
 8006a50:	4291      	cmp	r1, r2
 8006a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a56:	d100      	bne.n	8006a5a <memcpy+0xc>
 8006a58:	4770      	bx	lr
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a64:	4291      	cmp	r1, r2
 8006a66:	d1f9      	bne.n	8006a5c <memcpy+0xe>
 8006a68:	bd10      	pop	{r4, pc}
	...

08006a6c <_free_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d041      	beq.n	8006af8 <_free_r+0x8c>
 8006a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a78:	1f0c      	subs	r4, r1, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfb8      	it	lt
 8006a7e:	18e4      	addlt	r4, r4, r3
 8006a80:	f000 f8e0 	bl	8006c44 <__malloc_lock>
 8006a84:	4a1d      	ldr	r2, [pc, #116]	@ (8006afc <_free_r+0x90>)
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	b933      	cbnz	r3, 8006a98 <_free_r+0x2c>
 8006a8a:	6063      	str	r3, [r4, #4]
 8006a8c:	6014      	str	r4, [r2, #0]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a94:	f000 b8dc 	b.w	8006c50 <__malloc_unlock>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d908      	bls.n	8006aae <_free_r+0x42>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	1821      	adds	r1, r4, r0
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf01      	itttt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	1809      	addeq	r1, r1, r0
 8006aaa:	6021      	streq	r1, [r4, #0]
 8006aac:	e7ed      	b.n	8006a8a <_free_r+0x1e>
 8006aae:	461a      	mov	r2, r3
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b10b      	cbz	r3, 8006ab8 <_free_r+0x4c>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d9fa      	bls.n	8006aae <_free_r+0x42>
 8006ab8:	6811      	ldr	r1, [r2, #0]
 8006aba:	1850      	adds	r0, r2, r1
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d10b      	bne.n	8006ad8 <_free_r+0x6c>
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	4401      	add	r1, r0
 8006ac4:	1850      	adds	r0, r2, r1
 8006ac6:	4283      	cmp	r3, r0
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	d1e0      	bne.n	8006a8e <_free_r+0x22>
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	6053      	str	r3, [r2, #4]
 8006ad2:	4408      	add	r0, r1
 8006ad4:	6010      	str	r0, [r2, #0]
 8006ad6:	e7da      	b.n	8006a8e <_free_r+0x22>
 8006ad8:	d902      	bls.n	8006ae0 <_free_r+0x74>
 8006ada:	230c      	movs	r3, #12
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	e7d6      	b.n	8006a8e <_free_r+0x22>
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	1821      	adds	r1, r4, r0
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	bf04      	itt	eq
 8006ae8:	6819      	ldreq	r1, [r3, #0]
 8006aea:	685b      	ldreq	r3, [r3, #4]
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	bf04      	itt	eq
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	6054      	str	r4, [r2, #4]
 8006af6:	e7ca      	b.n	8006a8e <_free_r+0x22>
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	200022d8 	.word	0x200022d8

08006b00 <sbrk_aligned>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4e0f      	ldr	r6, [pc, #60]	@ (8006b40 <sbrk_aligned+0x40>)
 8006b04:	460c      	mov	r4, r1
 8006b06:	6831      	ldr	r1, [r6, #0]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	b911      	cbnz	r1, 8006b12 <sbrk_aligned+0x12>
 8006b0c:	f000 f9d6 	bl	8006ebc <_sbrk_r>
 8006b10:	6030      	str	r0, [r6, #0]
 8006b12:	4621      	mov	r1, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 f9d1 	bl	8006ebc <_sbrk_r>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	d103      	bne.n	8006b26 <sbrk_aligned+0x26>
 8006b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b22:	4620      	mov	r0, r4
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
 8006b26:	1cc4      	adds	r4, r0, #3
 8006b28:	f024 0403 	bic.w	r4, r4, #3
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d0f8      	beq.n	8006b22 <sbrk_aligned+0x22>
 8006b30:	1a21      	subs	r1, r4, r0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 f9c2 	bl	8006ebc <_sbrk_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d1f2      	bne.n	8006b22 <sbrk_aligned+0x22>
 8006b3c:	e7ef      	b.n	8006b1e <sbrk_aligned+0x1e>
 8006b3e:	bf00      	nop
 8006b40:	200022d4 	.word	0x200022d4

08006b44 <_malloc_r>:
 8006b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b48:	1ccd      	adds	r5, r1, #3
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	4606      	mov	r6, r0
 8006b5a:	db01      	blt.n	8006b60 <_malloc_r+0x1c>
 8006b5c:	42a9      	cmp	r1, r5
 8006b5e:	d904      	bls.n	8006b6a <_malloc_r+0x26>
 8006b60:	230c      	movs	r3, #12
 8006b62:	6033      	str	r3, [r6, #0]
 8006b64:	2000      	movs	r0, #0
 8006b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c40 <_malloc_r+0xfc>
 8006b6e:	f000 f869 	bl	8006c44 <__malloc_lock>
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	461c      	mov	r4, r3
 8006b78:	bb44      	cbnz	r4, 8006bcc <_malloc_r+0x88>
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ffbf 	bl	8006b00 <sbrk_aligned>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	4604      	mov	r4, r0
 8006b86:	d158      	bne.n	8006c3a <_malloc_r+0xf6>
 8006b88:	f8d8 4000 	ldr.w	r4, [r8]
 8006b8c:	4627      	mov	r7, r4
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	d143      	bne.n	8006c1a <_malloc_r+0xd6>
 8006b92:	2c00      	cmp	r4, #0
 8006b94:	d04b      	beq.n	8006c2e <_malloc_r+0xea>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	eb04 0903 	add.w	r9, r4, r3
 8006ba0:	f000 f98c 	bl	8006ebc <_sbrk_r>
 8006ba4:	4581      	cmp	r9, r0
 8006ba6:	d142      	bne.n	8006c2e <_malloc_r+0xea>
 8006ba8:	6821      	ldr	r1, [r4, #0]
 8006baa:	1a6d      	subs	r5, r5, r1
 8006bac:	4629      	mov	r1, r5
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7ff ffa6 	bl	8006b00 <sbrk_aligned>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d03a      	beq.n	8006c2e <_malloc_r+0xea>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	442b      	add	r3, r5
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	bb62      	cbnz	r2, 8006c20 <_malloc_r+0xdc>
 8006bc6:	f8c8 7000 	str.w	r7, [r8]
 8006bca:	e00f      	b.n	8006bec <_malloc_r+0xa8>
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	1b52      	subs	r2, r2, r5
 8006bd0:	d420      	bmi.n	8006c14 <_malloc_r+0xd0>
 8006bd2:	2a0b      	cmp	r2, #11
 8006bd4:	d917      	bls.n	8006c06 <_malloc_r+0xc2>
 8006bd6:	1961      	adds	r1, r4, r5
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	6025      	str	r5, [r4, #0]
 8006bdc:	bf18      	it	ne
 8006bde:	6059      	strne	r1, [r3, #4]
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	bf08      	it	eq
 8006be4:	f8c8 1000 	streq.w	r1, [r8]
 8006be8:	5162      	str	r2, [r4, r5]
 8006bea:	604b      	str	r3, [r1, #4]
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 f82f 	bl	8006c50 <__malloc_unlock>
 8006bf2:	f104 000b 	add.w	r0, r4, #11
 8006bf6:	1d23      	adds	r3, r4, #4
 8006bf8:	f020 0007 	bic.w	r0, r0, #7
 8006bfc:	1ac2      	subs	r2, r0, r3
 8006bfe:	bf1c      	itt	ne
 8006c00:	1a1b      	subne	r3, r3, r0
 8006c02:	50a3      	strne	r3, [r4, r2]
 8006c04:	e7af      	b.n	8006b66 <_malloc_r+0x22>
 8006c06:	6862      	ldr	r2, [r4, #4]
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	bf0c      	ite	eq
 8006c0c:	f8c8 2000 	streq.w	r2, [r8]
 8006c10:	605a      	strne	r2, [r3, #4]
 8006c12:	e7eb      	b.n	8006bec <_malloc_r+0xa8>
 8006c14:	4623      	mov	r3, r4
 8006c16:	6864      	ldr	r4, [r4, #4]
 8006c18:	e7ae      	b.n	8006b78 <_malloc_r+0x34>
 8006c1a:	463c      	mov	r4, r7
 8006c1c:	687f      	ldr	r7, [r7, #4]
 8006c1e:	e7b6      	b.n	8006b8e <_malloc_r+0x4a>
 8006c20:	461a      	mov	r2, r3
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d1fb      	bne.n	8006c20 <_malloc_r+0xdc>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6053      	str	r3, [r2, #4]
 8006c2c:	e7de      	b.n	8006bec <_malloc_r+0xa8>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	4630      	mov	r0, r6
 8006c34:	f000 f80c 	bl	8006c50 <__malloc_unlock>
 8006c38:	e794      	b.n	8006b64 <_malloc_r+0x20>
 8006c3a:	6005      	str	r5, [r0, #0]
 8006c3c:	e7d6      	b.n	8006bec <_malloc_r+0xa8>
 8006c3e:	bf00      	nop
 8006c40:	200022d8 	.word	0x200022d8

08006c44 <__malloc_lock>:
 8006c44:	4801      	ldr	r0, [pc, #4]	@ (8006c4c <__malloc_lock+0x8>)
 8006c46:	f7ff bf00 	b.w	8006a4a <__retarget_lock_acquire_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	200022d0 	.word	0x200022d0

08006c50 <__malloc_unlock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	@ (8006c58 <__malloc_unlock+0x8>)
 8006c52:	f7ff befb 	b.w	8006a4c <__retarget_lock_release_recursive>
 8006c56:	bf00      	nop
 8006c58:	200022d0 	.word	0x200022d0

08006c5c <__sflush_r>:
 8006c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	0716      	lsls	r6, r2, #28
 8006c66:	4605      	mov	r5, r0
 8006c68:	460c      	mov	r4, r1
 8006c6a:	d454      	bmi.n	8006d16 <__sflush_r+0xba>
 8006c6c:	684b      	ldr	r3, [r1, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dc02      	bgt.n	8006c78 <__sflush_r+0x1c>
 8006c72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dd48      	ble.n	8006d0a <__sflush_r+0xae>
 8006c78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c7a:	2e00      	cmp	r6, #0
 8006c7c:	d045      	beq.n	8006d0a <__sflush_r+0xae>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c84:	682f      	ldr	r7, [r5, #0]
 8006c86:	6a21      	ldr	r1, [r4, #32]
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	d030      	beq.n	8006cee <__sflush_r+0x92>
 8006c8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	0759      	lsls	r1, r3, #29
 8006c92:	d505      	bpl.n	8006ca0 <__sflush_r+0x44>
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c9a:	b10b      	cbz	r3, 8006ca0 <__sflush_r+0x44>
 8006c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ca4:	6a21      	ldr	r1, [r4, #32]
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b0      	blx	r6
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	d106      	bne.n	8006cbe <__sflush_r+0x62>
 8006cb0:	6829      	ldr	r1, [r5, #0]
 8006cb2:	291d      	cmp	r1, #29
 8006cb4:	d82b      	bhi.n	8006d0e <__sflush_r+0xb2>
 8006cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d60 <__sflush_r+0x104>)
 8006cb8:	40ca      	lsrs	r2, r1
 8006cba:	07d6      	lsls	r6, r2, #31
 8006cbc:	d527      	bpl.n	8006d0e <__sflush_r+0xb2>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	6062      	str	r2, [r4, #4]
 8006cc2:	04d9      	lsls	r1, r3, #19
 8006cc4:	6922      	ldr	r2, [r4, #16]
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	d504      	bpl.n	8006cd4 <__sflush_r+0x78>
 8006cca:	1c42      	adds	r2, r0, #1
 8006ccc:	d101      	bne.n	8006cd2 <__sflush_r+0x76>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	b903      	cbnz	r3, 8006cd4 <__sflush_r+0x78>
 8006cd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cd6:	602f      	str	r7, [r5, #0]
 8006cd8:	b1b9      	cbz	r1, 8006d0a <__sflush_r+0xae>
 8006cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cde:	4299      	cmp	r1, r3
 8006ce0:	d002      	beq.n	8006ce8 <__sflush_r+0x8c>
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f7ff fec2 	bl	8006a6c <_free_r>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cec:	e00d      	b.n	8006d0a <__sflush_r+0xae>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b0      	blx	r6
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	1c50      	adds	r0, r2, #1
 8006cf8:	d1c9      	bne.n	8006c8e <__sflush_r+0x32>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0c6      	beq.n	8006c8e <__sflush_r+0x32>
 8006d00:	2b1d      	cmp	r3, #29
 8006d02:	d001      	beq.n	8006d08 <__sflush_r+0xac>
 8006d04:	2b16      	cmp	r3, #22
 8006d06:	d11e      	bne.n	8006d46 <__sflush_r+0xea>
 8006d08:	602f      	str	r7, [r5, #0]
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e022      	b.n	8006d54 <__sflush_r+0xf8>
 8006d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d12:	b21b      	sxth	r3, r3
 8006d14:	e01b      	b.n	8006d4e <__sflush_r+0xf2>
 8006d16:	690f      	ldr	r7, [r1, #16]
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	d0f6      	beq.n	8006d0a <__sflush_r+0xae>
 8006d1c:	0793      	lsls	r3, r2, #30
 8006d1e:	680e      	ldr	r6, [r1, #0]
 8006d20:	bf08      	it	eq
 8006d22:	694b      	ldreq	r3, [r1, #20]
 8006d24:	600f      	str	r7, [r1, #0]
 8006d26:	bf18      	it	ne
 8006d28:	2300      	movne	r3, #0
 8006d2a:	eba6 0807 	sub.w	r8, r6, r7
 8006d2e:	608b      	str	r3, [r1, #8]
 8006d30:	f1b8 0f00 	cmp.w	r8, #0
 8006d34:	dde9      	ble.n	8006d0a <__sflush_r+0xae>
 8006d36:	6a21      	ldr	r1, [r4, #32]
 8006d38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d3a:	4643      	mov	r3, r8
 8006d3c:	463a      	mov	r2, r7
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b0      	blx	r6
 8006d42:	2800      	cmp	r0, #0
 8006d44:	dc08      	bgt.n	8006d58 <__sflush_r+0xfc>
 8006d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d58:	4407      	add	r7, r0
 8006d5a:	eba8 0800 	sub.w	r8, r8, r0
 8006d5e:	e7e7      	b.n	8006d30 <__sflush_r+0xd4>
 8006d60:	20400001 	.word	0x20400001

08006d64 <_fflush_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	690b      	ldr	r3, [r1, #16]
 8006d68:	4605      	mov	r5, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	b913      	cbnz	r3, 8006d74 <_fflush_r+0x10>
 8006d6e:	2500      	movs	r5, #0
 8006d70:	4628      	mov	r0, r5
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	b118      	cbz	r0, 8006d7e <_fflush_r+0x1a>
 8006d76:	6a03      	ldr	r3, [r0, #32]
 8006d78:	b90b      	cbnz	r3, 8006d7e <_fflush_r+0x1a>
 8006d7a:	f7ff fc81 	bl	8006680 <__sinit>
 8006d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f3      	beq.n	8006d6e <_fflush_r+0xa>
 8006d86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d88:	07d0      	lsls	r0, r2, #31
 8006d8a:	d404      	bmi.n	8006d96 <_fflush_r+0x32>
 8006d8c:	0599      	lsls	r1, r3, #22
 8006d8e:	d402      	bmi.n	8006d96 <_fflush_r+0x32>
 8006d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d92:	f7ff fe5a 	bl	8006a4a <__retarget_lock_acquire_recursive>
 8006d96:	4628      	mov	r0, r5
 8006d98:	4621      	mov	r1, r4
 8006d9a:	f7ff ff5f 	bl	8006c5c <__sflush_r>
 8006d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da0:	07da      	lsls	r2, r3, #31
 8006da2:	4605      	mov	r5, r0
 8006da4:	d4e4      	bmi.n	8006d70 <_fflush_r+0xc>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	059b      	lsls	r3, r3, #22
 8006daa:	d4e1      	bmi.n	8006d70 <_fflush_r+0xc>
 8006dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dae:	f7ff fe4d 	bl	8006a4c <__retarget_lock_release_recursive>
 8006db2:	e7dd      	b.n	8006d70 <_fflush_r+0xc>

08006db4 <__swhatbuf_r>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	460c      	mov	r4, r1
 8006db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	b096      	sub	sp, #88	@ 0x58
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	461e      	mov	r6, r3
 8006dc4:	da0d      	bge.n	8006de2 <__swhatbuf_r+0x2e>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006dcc:	f04f 0100 	mov.w	r1, #0
 8006dd0:	bf14      	ite	ne
 8006dd2:	2340      	movne	r3, #64	@ 0x40
 8006dd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006dd8:	2000      	movs	r0, #0
 8006dda:	6031      	str	r1, [r6, #0]
 8006ddc:	602b      	str	r3, [r5, #0]
 8006dde:	b016      	add	sp, #88	@ 0x58
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	466a      	mov	r2, sp
 8006de4:	f000 f848 	bl	8006e78 <_fstat_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	dbec      	blt.n	8006dc6 <__swhatbuf_r+0x12>
 8006dec:	9901      	ldr	r1, [sp, #4]
 8006dee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006df2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006df6:	4259      	negs	r1, r3
 8006df8:	4159      	adcs	r1, r3
 8006dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dfe:	e7eb      	b.n	8006dd8 <__swhatbuf_r+0x24>

08006e00 <__smakebuf_r>:
 8006e00:	898b      	ldrh	r3, [r1, #12]
 8006e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e04:	079d      	lsls	r5, r3, #30
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	d507      	bpl.n	8006e1c <__smakebuf_r+0x1c>
 8006e0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	2301      	movs	r3, #1
 8006e16:	6163      	str	r3, [r4, #20]
 8006e18:	b003      	add	sp, #12
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1c:	ab01      	add	r3, sp, #4
 8006e1e:	466a      	mov	r2, sp
 8006e20:	f7ff ffc8 	bl	8006db4 <__swhatbuf_r>
 8006e24:	9f00      	ldr	r7, [sp, #0]
 8006e26:	4605      	mov	r5, r0
 8006e28:	4639      	mov	r1, r7
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7ff fe8a 	bl	8006b44 <_malloc_r>
 8006e30:	b948      	cbnz	r0, 8006e46 <__smakebuf_r+0x46>
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	059a      	lsls	r2, r3, #22
 8006e38:	d4ee      	bmi.n	8006e18 <__smakebuf_r+0x18>
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	f043 0302 	orr.w	r3, r3, #2
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	e7e2      	b.n	8006e0c <__smakebuf_r+0xc>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	6020      	str	r0, [r4, #0]
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e56:	b15b      	cbz	r3, 8006e70 <__smakebuf_r+0x70>
 8006e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f81d 	bl	8006e9c <_isatty_r>
 8006e62:	b128      	cbz	r0, 8006e70 <__smakebuf_r+0x70>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	431d      	orrs	r5, r3
 8006e74:	81a5      	strh	r5, [r4, #12]
 8006e76:	e7cf      	b.n	8006e18 <__smakebuf_r+0x18>

08006e78 <_fstat_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	@ (8006e98 <_fstat_r+0x20>)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	4611      	mov	r1, r2
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f7f9 fd44 	bl	8000912 <_fstat>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d102      	bne.n	8006e94 <_fstat_r+0x1c>
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	b103      	cbz	r3, 8006e94 <_fstat_r+0x1c>
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	200022cc 	.word	0x200022cc

08006e9c <_isatty_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	@ (8006eb8 <_isatty_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7f9 fd43 	bl	8000932 <_isatty>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_isatty_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_isatty_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200022cc 	.word	0x200022cc

08006ebc <_sbrk_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d06      	ldr	r5, [pc, #24]	@ (8006ed8 <_sbrk_r+0x1c>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	f7f9 fd4c 	bl	8000964 <_sbrk>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_sbrk_r+0x1a>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_sbrk_r+0x1a>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	200022cc 	.word	0x200022cc

08006edc <_init>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	bf00      	nop
 8006ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee2:	bc08      	pop	{r3}
 8006ee4:	469e      	mov	lr, r3
 8006ee6:	4770      	bx	lr

08006ee8 <_fini>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	bf00      	nop
 8006eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eee:	bc08      	pop	{r3}
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	4770      	bx	lr
